package mazdady.ui;

import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Rect;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.util.AttributeSet;
import android.view.View;

import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

/**
 * شريط تحميل مخصص مع دعم الصور والتأثيرات
 * يتبع نمط Observer لإعلام النظام بالتقدم
 */
public final class LoadingProgressBar extends View {
    private final Paint progressPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
    private final Paint backgroundPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
    private final Paint textPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
    private final ScheduledExecutorService animator = Executors.newSingleThreadScheduledExecutor();
    
    private volatile int progress = 0;
    private volatile String progressText = "0%";
    private volatile Drawable backgroundImage;
    private volatile int barColor = Color.parseColor("#4CAF50");
    private volatile int backgroundColor = Color.parseColor("#1a1a2e");
    private volatile float cornerRadius = 25f;
    private static LoadingProgressBar instance;

    public LoadingProgressBar(Context context, AttributeSet attrs) {
        super(context, attrs);
        initializePaints();
        startAnimation();
    }

    private void initializePaints() {
        progressPaint.setColor(barColor);
        progressPaint.setStyle(Paint.Style.FILL);
        
        backgroundPaint.setColor(backgroundColor);
        backgroundPaint.setStyle(Paint.Style.FILL);
        
        textPaint.setColor(Color.WHITE);
        textPaint.setTextSize(16f);
        textPaint.setTextAlign(Paint.Align.CENTER);
        textPaint.setFakeBoldText(true);
    }

    private void startAnimation() {
        animator.scheduleAtFixedRate(
            this::animateProgress,
            0,
            100,
            TimeUnit.MILLISECONDS
        );
        
        System.out.println("LOADING PROGRESS BAR: Started animation");
    }

    private void animateProgress() {
        post(() -> {
            invalidate(); // إعادة رسم العرض
        });
    }

    /**
     * تعيين التقدم
     */
    public void setProgress(int progress) {
        if (progress < 0) progress = 0;
        if (progress > 100) progress = 100;
        this.progress = progress;
        this.progressText = progress + "%";
        postInvalidate();
    }

    /**
     * تعيين خلفية الشريط
     */
    public void setBackgroundImage(Drawable backgroundImage) {
        this.backgroundImage = backgroundImage;
        postInvalidate();
        System.out.println("LOADING PROGRESS BAR: Background image set");
    }

    /**
     * تعيين لون الشريط
     */
    public void setBarColor(int color) {
        this.barColor = color;
        progressPaint.setColor(color);
        postInvalidate();
        System.out.println("LOADING PROGRESS BAR: Bar color set to " + color);
    }

    /**
     * تعيين لون الخلفية
     */
    public void setBackgroundColor(int color) {
        this.backgroundColor = color;
        backgroundPaint.setColor(color);
        postInvalidate();
        System.out.println("LOADING PROGRESS BAR: Background color set to " + color);
    }

    /**
     * تعيين نصف قطر الزوايا
     */
    public void setCornerRadius(float radius) {
        this.cornerRadius = radius;
        postInvalidate();
        System.out.println("LOADING PROGRESS BAR: Corner radius set to " + radius);
    }

    @Override
    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);
        
        try {
            int width = getWidth();
            int height = getHeight();
            
            // رسم خلفية الشريط
            if (backgroundImage != null) {
                backgroundImage.setBounds(0, 0, width, height);
                backgroundImage.draw(canvas);
            } else {
                // رسم خلفية ملونة
                canvas.drawRoundRect(0, 0, width, height, cornerRadius, cornerRadius, backgroundPaint);
            }
            
            // رسم شريط التقدم
            float progressWidth = width * progress / 100f;
            canvas.drawRoundRect(0, 0, progressWidth, height, cornerRadius, cornerRadius, progressPaint);
            
            // رسم النص
            canvas.drawText(progressText, width / 2f, height / 2f + 5, textPaint);
            
        } catch (Exception e) {
            System.err.println("LOADING PROGRESS BAR DRAW ERROR: " + e.getMessage());
        }
    }

    /**
     * إيقاف التحريك (للاختبارات)
     */
    public void shutdown() {
        animator.shutdown();
        System.out.println("LOADING PROGRESS BAR: Shutdown completed");
    }

    // --- Getters ---
    public int getProgress() { return progress; }
    public String getProgressText() { return progressText; }
    public Drawable getBackgroundImage() { return backgroundImage; }
    public int getBarColor() { return barColor; }
    public int getBackgroundColor() { return backgroundColor; }
    public float getCornerRadius() { return cornerRadius; }
    
    /**
     * إعادة تعيين الشريط (للاختبارات)
     */
    public void reset() {
        setProgress(0);
        progressText = "0%";
        System.out.println("LOADING PROGRESS BAR: Reset completed");
    }
}