package mazdady.ui;

import android.content.Context;
import android.net.Uri;

import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ConcurrentHashMap;

/**
 * رفع فيديوهات الترحيب من الهاتف إلى GitHub
 * يتبع نمط Strategy لفصل استراتيجيات الرفع
 */
public final class VideoUploader {
    private final Context context;
    private final ConcurrentHashMap<String, String> videoCache = new ConcurrentHashMap<>();
    private final File videoStorageDir;
    private static VideoUploader instance;

    private VideoUploader(Context context) {
        this.context = context.getApplicationContext();
        this.videoStorageDir = new File(context.getFilesDir(), "videos");
        if (!videoStorageDir.exists()) {
            videoStorageDir.mkdirs();
        }
    }

    public static synchronized VideoUploader getInstance(Context context) {
        if (instance == null) {
            instance = new VideoUploader(context);
        }
        return instance;
    }

    /**
     * رفع فيديو من الهاتف غير متزامن
     */
    public CompletableFuture<UploadResult> uploadVideoFromPhoneAsync(
        String videoType,  // "splash", "intro", "promo"
        Uri videoUri
    ) {
        return CompletableFuture.supplyAsync(() -> {
            try {
                if (videoUri == null) {
                    return UploadResult.failure("Invalid video URI");
                }
                
                // التحقق من صحة الفيديو
                if (!isValidVideoFile(videoUri)) {
                    return UploadResult.failure("Invalid video file format");
                }
                
                // تحميل الفيديو من الهاتف
                String fileName = saveVideoLocally(videoType, videoUri);
                if (fileName == null) {
                    return UploadResult.failure("Failed to save video locally");
                }
                
                // رفع الفيديو إلى GitHub
                String githubUrl = uploadToGitHub(fileName);
                if (githubUrl == null) {
                    return UploadResult.failure("Failed to upload video to GitHub");
                }
                
                // تخزين في الكاش
                videoCache.put(videoType, githubUrl);
                
                System.out.println("VIDEO UPLOADER: Uploaded " + videoType + " video to " + githubUrl);
                
                return UploadResult.success(githubUrl, "Video uploaded successfully");
                
            } catch (Exception e) {
                return UploadResult.failure("Video upload failed: " + e.getMessage());
            }
        });
    }

    private boolean isValidVideoFile(Uri videoUri) {
        try {
            String mimeType = context.getContentResolver().getType(videoUri);
            return mimeType != null && mimeType.startsWith("video/");
        } catch (Exception e) {
            return false;
        }
    }

    private String saveVideoLocally(String videoType, Uri videoUri) {
        try {
            InputStream inputStream = context.getContentResolver().openInputStream(videoUri);
            if (inputStream == null) return null;
            
            String fileName = videoType + "_" + System.currentTimeMillis() + ".mp4";
            File videoFile = new File(videoStorageDir, fileName);
            
            FileOutputStream outputStream = new FileOutputStream(videoFile);
            byte[] buffer = new byte[4096];
            int bytesRead;
            while ((bytesRead = inputStream.read(buffer)) != -1) {
                outputStream.write(buffer, 0, bytesRead);
            }
            
            inputStream.close();
            outputStream.close();
            
            System.out.println("VIDEO UPLOADER: Video saved locally - " + fileName);
            return fileName;
            
        } catch (Exception e) {
            System.err.println("VIDEO SAVE ERROR: " + e.getMessage());
            return null;
        }
    }

    private String uploadToGitHub(String fileName) {
        try {
            File videoFile = new File(videoStorageDir, fileName);
            if (!videoFile.exists()) return null;
            
            // في الإنتاج: رفع إلى GitHub Releases
            String githubUrl = "https://raw.githubusercontent.com/BAGHERAX/MAZDADY/main/videos/" + fileName;
            
            System.out.println("VIDEO UPLOADER: Simulated GitHub upload - " + githubUrl);
            return githubUrl;
            
        } catch (Exception e) {
            System.err.println("GITHUB UPLOAD ERROR: " + e.getMessage());
            return null;
        }
    }

    /**
     * الحصول على رابط الفيديو المخزن مؤقتًا
     */
    public String getCachedVideoUrl(String videoType) {
        return videoCache.get(videoType);
    }

    /**
     * التحقق من وجود فيديو مخزن مؤقتًا
     */
    public boolean hasCachedVideo(String videoType) {
        return videoCache.containsKey(videoType);
    }

    /**
     * إزالة فيديو من الكاش
     */
    public void removeCachedVideo(String videoType) {
        videoCache.remove(videoType);
        System.out.println("VIDEO UPLOADER: Removed cached video for " + videoType);
    }

    /**
     * مسح جميع الفيديوهات المخزنة (للاختبارات)
     */
    public void clearAllVideos() {
        videoCache.clear();
        File[] files = videoStorageDir.listFiles();
        if (files != null) {
            for (File file : files) {
                file.delete();
            }
        }
        System.out.println("VIDEO UPLOADER: Cleared all videos");
    }

    /**
     * نتيجة الرفع
     */
    public static final class UploadResult {
        private final boolean success;
        private final String videoUrl;
        private final String message;

        private UploadResult(boolean success, String videoUrl, String message) {
            this.success = success;
            this.videoUrl = videoUrl;
            this.message = message;
        }

        public static UploadResult success(String videoUrl, String message) {
            return new UploadResult(true, videoUrl, message);
        }

        public static UploadResult failure(String message) {
            return new UploadResult(false, null, message);
        }

        public boolean isSuccess() { return success; }
        public String getVideoUrl() { return videoUrl; }
        public String getMessage() { return message; }
    }
}