package mazdady.ui;

import android.animation.Animator;
import android.animation.AnimatorListenerAdapter;
import android.animation.ObjectAnimator;
import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Path;
import android.util.AttributeSet;
import android.view.View;
import android.view.animation.OvershootInterpolator;
import android.widget.FrameLayout;

import java.util.Random;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

/**
 * نظام النجوم الديناميكي مع دعم التأثيرات المتقدمة
 * يتبع نمط Observer لإشعار النظام بالنجوم
 */
public final class StarEffectManager extends FrameLayout {
    private final ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);
    private final Random random = new Random();
    private volatile boolean starsActive = true;
    private volatile int starCount = 0;

    public StarEffectManager(Context context, AttributeSet attrs) {
        super(context, attrs);
        setWillNotDraw(false);
    }

    /**
     * عرض تأثير نجم جديد
     */
    public void showStar() {
        post(() -> {
            if (starCount >= 20) return; // حد أقصى 20 نجمة
            
            StarParticle star = new StarParticle(getContext());
            LayoutParams params = new LayoutParams(60, 60);
            params.leftMargin = random.nextInt(Math.max(1, getWidth() - 60));
            params.topMargin = random.nextInt(Math.max(1, getHeight() - 200));
            addView(star, params);
            
            star.startAnimation(() -> {
                post(() -> removeView(star));
                starCount--;
            });
            
            starCount++;
            System.out.println("STAR EFFECT: Star shown (Total: " + starCount + ")");
        });
    }

    /**
     * عرض نجوم متعددة
     */
    public void showMultipleStars(int count) {
        for (int i = 0; i < count && starCount < 20; i++) {
            scheduler.schedule(
                this::showStar,
                i * 200,
                TimeUnit.MILLISECONDS
            );
        }
    }

    /**
     * بدء تأثير النجوم التلقائي
     */
    public void startAutoStarEffects() {
        scheduler.scheduleAtFixedRate(
            () -> {
                if (starsActive && starCount < 10) {
                    showStar();
                }
            },
            0,
            3,
            TimeUnit.SECONDS
        );
    }

    /**
     * إيقاف تأثيرات النجوم
     */
    public void stopStarEffects() {
        starsActive = false;
        scheduler.shutdown();
        post(this::removeAllViews);
        starCount = 0;
        System.out.println("STAR EFFECT: All stars stopped");
    }

    /**
     * جسيم النجمة
     */
    private static final class StarParticle extends View {
        private final Paint paint = new Paint(Paint.ANTI_ALIAS_FLAG);
        private final Path starPath = new Path();
        private boolean initialized = false;

        public StarParticle(Context context) {
            super(context);
            paint.setColor(Color.YELLOW);
            paint.setStyle(Paint.Style.FILL_AND_STROKE);
            paint.setStrokeWidth(2f);
        }

        /**
         * بدء التأثير البصري
         */
        public void startAnimation(Runnable onComplete) {
            // تأثير الوميض
            ObjectAnimator alphaAnimator = ObjectAnimator.ofFloat(this, "alpha", 0f, 1f, 0.5f, 1f, 0f);
            alphaAnimator.setDuration(2000);
            
            // تأثير التكبير
            ObjectAnimator scaleAnimator = ObjectAnimator.ofFloat(this, "scaleX", 0f, 1.5f, 1f);
            scaleAnimator.setDuration(1000);
            scaleAnimator.setInterpolator(new OvershootInterpolator());
            
            alphaAnimator.addListener(new AnimatorListenerAdapter() {
                @Override
                public void onAnimationEnd(Animator animation) {
                    if (onComplete != null) {
                        onComplete.run();
                    }
                }
            });
            
            alphaAnimator.start();
            scaleAnimator.start();
        }

        @Override
        protected void onDraw(Canvas canvas) {
            super.onDraw(canvas);
            
            if (!initialized) {
                drawStar(canvas.getWidth(), canvas.getHeight());
                initialized = true;
            }
            
            canvas.drawPath(starPath, paint);
        }

        private void drawStar(int width, int height) {
            float centerX = width / 2f;
            float centerY = height / 2f;
            float outerRadius = Math.min(width, height) / 2f;
            float innerRadius = outerRadius * 0.4f;
            
            starPath.reset();
            
            for (int i = 0; i < 5; i++) {
                float angle = (float) Math.toRadians(i * 72 - 18);
                float x = centerX + (float) (outerRadius * Math.cos(angle));
                float y = centerY + (float) (outerRadius * Math.sin(angle));
                
                if (i == 0) {
                    starPath.moveTo(x, y);
                } else {
                    starPath.lineTo(x, y);
                }
                
                angle = (float) Math.toRadians(i * 72 + 36 - 18);
                x = centerX + (float) (innerRadius * Math.cos(angle));
                y = centerY + (float) (innerRadius * Math.sin(angle));
                starPath.lineTo(x, y);
            }
            
            starPath.close();
        }
    }

    // --- Getters ---
    public boolean isStarsActive() { return starsActive; }
    public int getStarCount() { return starCount; }
    public void setStarsActive(boolean active) { this.starsActive = active; }
}