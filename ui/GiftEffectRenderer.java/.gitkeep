package mazdady.ui;

import android.animation.Animator;
import android.animation.AnimatorSet;
import android.animation.ObjectAnimator;
import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Path;
import android.util.AttributeSet;
import android.view.View;
import android.view.animation.AccelerateDecelerateInterpolator;
import android.widget.FrameLayout;

import java.util.Random;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

/**
 * تأثيرات الهدايا البصرية مع دعم التخصيص الديناميكي
 * يتبع نمط Observer لإشعار النظام بالتأثيرات
 */
public final class GiftEffectRenderer extends FrameLayout {
    private final ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);
    private final Random random = new Random();
    private volatile boolean effectsActive = true;

    public GiftEffectRenderer(Context context, AttributeSet attrs) {
        super(context, attrs);
        setWillNotDraw(false);
        startContinuousEffects();
    }

    /**
     * عرض تأثير هدية جديد
     */
    public void showGiftEffect(double giftAmount) {
        post(() -> {
            // إنشاء تأثير بصري للهدية
            GiftParticle particle = new GiftParticle(getContext());
            particle.setGiftAmount(giftAmount);
            
            LayoutParams params = new LayoutParams(100, 100);
            params.leftMargin = random.nextInt(getWidth() - 100);
            params.topMargin = getHeight() - 200;
            addView(particle, params);
            
            // تشغيل التأثير
            particle.startAnimation();
            
            // إزالة التأثير بعد انتهاء الوقت
            scheduler.schedule(
                () -> post(() -> removeView(particle)),
                3000,
                TimeUnit.MILLISECONDS
            );
            
            System.out.println("GIFT EFFECT: Shown for amount " + giftAmount);
        });
    }

    /**
     * بدء التأثيرات المستمرة
     */
    private void startContinuousEffects() {
        scheduler.scheduleAtFixedRate(
            () -> {
                if (effectsActive && getChildCount() < 5) {
                    // إنشاء تأثير عشوائي
                    double randomAmount = 10 + (random.nextDouble() * 90);
                    showGiftEffect(randomAmount);
                }
            },
            0,
            5,
            TimeUnit.SECONDS
        );
    }

    /**
     * جسيم الهدية
     */
    private static final class GiftParticle extends View {
        private final Paint paint = new Paint(Paint.ANTI_ALIAS_FLAG);
        private final Path path = new Path();
        private double giftAmount = 0;
        private float rotation = 0;
        private boolean initialized = false;

        public GiftParticle(Context context) {
            super(context);
            paint.setStyle(Paint.Style.FILL);
        }

        public void setGiftAmount(double amount) {
            this.giftAmount = amount;
            initializeColors();
        }

        private void initializeColors() {
            if (giftAmount < 50) {
                paint.setColor(Color.parseColor("#4CAF50")); // أخضر للكميات الصغيرة
            } else if (giftAmount < 100) {
                paint.setColor(Color.parseColor("#FF9800")); // برتقالي للمتوسطة
            } else {
                paint.setColor(Color.parseColor("#F44336")); // أحمر للكميات الكبيرة
            }
        }

        /**
         * بدء التأثير البصري
         */
        public void startAnimation() {
            // تأثير التكبير والتصغير
            ObjectAnimator scaleX = ObjectAnimator.ofFloat(this, "scaleX", 0f, 1.2f, 1f);
            ObjectAnimator scaleY = ObjectAnimator.ofFloat(this, "scaleY", 0f, 1.2f, 1f);
            scaleX.setDuration(800);
            scaleY.setDuration(800);
            
            // تأثير الدوران
            ObjectAnimator rotate = ObjectAnimator.ofFloat(this, "rotation", 0f, 360f);
            rotate.setDuration(1000);
            
            // تأثير الشفافية
            ObjectAnimator alpha = ObjectAnimator.ofFloat(this, "alpha", 0f, 1f, 0.8f, 0f);
            alpha.setDuration(3000);
            
            AnimatorSet animatorSet = new AnimatorSet();
            animatorSet.playTogether(scaleX, scaleY, rotate, alpha);
            animatorSet.setInterpolator(new AccelerateDecelerateInterpolator());
            animatorSet.start();
        }

        @Override
        protected void onDraw(Canvas canvas) {
            super.onDraw(canvas);
            
            if (!initialized) {
                // رسم شكل الهدية (صندوق)
                path.moveTo(getWidth() / 2f, 0);
                path.lineTo(getWidth(), getHeight() / 3f);
                path.lineTo(getWidth() * 0.75f, getHeight());
                path.lineTo(getWidth() * 0.25f, getHeight());
                path.lineTo(0, getHeight() / 3f);
                path.close();
                initialized = true;
            }
            
            canvas.save();
            canvas.rotate(rotation, getWidth() / 2f, getHeight() / 2f);
            canvas.drawPath(path, paint);
            canvas.restore();
        }
    }

    /**
     * إيقاف التأثيرات (للاختبارات)
     */
    public void shutdown() {
        effectsActive = false;
        scheduler.shutdown();
        removeAllViews();
        System.out.println("GIFT EFFECT RENDERER: Shutdown completed");
    }

    // --- Getters ---
    public boolean isEffectsActive() { return effectsActive; }
    public void setEffectsActive(boolean active) { this.effectsActive = active; }
}