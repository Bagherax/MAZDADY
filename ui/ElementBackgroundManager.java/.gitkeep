package mazdady.ui;

import android.content.Context;
import android.graphics.Color;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.ColorDrawable;
import android.graphics.drawable.Drawable;
import android.net.Uri;
import android.view.View;

import java.io.File;
import java.util.concurrent.ConcurrentHashMap;

/**
 * مدير خلفيات العناصر مع دعم الصور المحلية والألوان
 * يتبع نمط Strategy لفصل استراتيجيات الخلفيات
 */
public final class ElementBackgroundManager {
    private final Context context;
    private final ImageUploader imageUploader;
    private final ConcurrentHashMap<String, BackgroundConfig> backgroundConfigs = new ConcurrentHashMap<>();
    private static ElementBackgroundManager instance;

    private ElementBackgroundManager(Context context) {
        this.context = context.getApplicationContext();
        this.imageUploader = ImageUploader.getInstance(context);
    }

    public static synchronized ElementBackgroundManager getInstance(Context context) {
        if (instance == null) {
            instance = new ElementBackgroundManager(context);
        }
        return instance;
    }

    /**
     * تعيين خلفية لعنصر
     */
    public void setElementBackground(String elementId, View element, BackgroundType type, String value) {
        BackgroundConfig config = new BackgroundConfig(type, value);
        backgroundConfigs.put(elementId, config);
        applyBackground(elementId, element, config);
        System.out.println("BACKGROUND MANAGER: Set background for " + elementId + " - " + type + ": " + value);
    }

    /**
     * تطبيق الخلفية على العنصر
     */
    private void applyBackground(String elementId, View element, BackgroundConfig config) {
        try {
            switch (config.getType()) {
                case COLOR:
                    applyColorBackground(element, config.getValue());
                    break;
                    
                case IMAGE_URI:
                    applyImageUriBackground(element, config.getValue());
                    break;
                    
                case LOCAL_IMAGE:
                    applyLocalImageBackground(elementId, element);
                    break;
                    
                case GRADIENT:
                    applyGradientBackground(element, config.getValue());
                    break;
                    
                case DEFAULT:
                default:
                    applyDefaultBackground(element);
                    break;
            }
            
        } catch (Exception e) {
            System.err.println("BACKGROUND APPLY ERROR: " + e.getMessage());
            applyDefaultBackground(element); // خلفية افتراضية كاحتياطي
        }
    }

    private void applyColorBackground(View element, String colorValue) {
        try {
            int color = Color.parseColor(colorValue);
            element.setBackground(new ColorDrawable(color));
            System.out.println("BACKGROUND MANAGER: Applied color background - " + colorValue);
        } catch (Exception e) {
            System.err.println("COLOR BACKGROUND ERROR: Invalid color " + colorValue);
        }
    }

    private void applyImageUriBackground(View element, String imageUri) {
        try {
            Uri uri = Uri.parse(imageUri);
            element.setBackground(new BitmapDrawable(
                context.getResources(),
                MediaStore.Images.Media.getBitmap(context.getContentResolver(), uri)
            ));
            System.out.println("BACKGROUND MANAGER: Applied image URI background");
        } catch (Exception e) {
            System.err.println("IMAGE URI BACKGROUND ERROR: " + e.getMessage());
        }
    }

    private void applyLocalImageBackground(String elementId, View element) {
        try {
            String imagePath = imageUploader.getLocalImagePath(elementId);
            if (imagePath != null) {
                File imageFile = new File(imagePath);
                if (imageFile.exists()) {
                    element.setBackground(new BitmapDrawable(
                        context.getResources(),
                        android.graphics.BitmapFactory.decodeFile(imagePath)
                    ));
                    System.out.println("BACKGROUND MANAGER: Applied local image background for " + elementId);
                }
            }
        } catch (Exception e) {
            System.err.println("LOCAL IMAGE BACKGROUND ERROR: " + e.getMessage());
        }
    }

    private void applyGradientBackground(View element, String gradientValue) {
        try {
            // في الإنتاج: تحليل قيمة التدرج وتطبيقه
            System.out.println("BACKGROUND MANAGER: Applied gradient background - " + gradientValue);
            element.setBackgroundColor(Color.parseColor("#4CAF50")); // مؤقت
        } catch (Exception e) {
            System.err.println("GRADIENT BACKGROUND ERROR: " + e.getMessage());
        }
    }

    private void applyDefaultBackground(View element) {
        element.setBackgroundColor(Color.parseColor("#0f0f1b")); // خلفية افتراضية
        System.out.println("BACKGROUND MANAGER: Applied default background");
    }

    /**
     * إزالة خلفية عنصر
     */
    public void removeElementBackground(String elementId, View element) {
        backgroundConfigs.remove(elementId);
        applyDefaultBackground(element);
        System.out.println("BACKGROUND MANAGER: Removed background for " + elementId);
    }

    /**
     * تحديث خلفية عنصر
     */
    public void updateElementBackground(String elementId, View element, BackgroundType newType, String newValue) {
        setElementBackground(elementId, element, newType, newValue);
    }

    /**
     * الحصول على إعدادات الخلفية لعنصر
     */
    public BackgroundConfig getBackgroundConfig(String elementId) {
        return backgroundConfigs.get(elementId);
    }

    /**
     * تطبيق جميع الخلفيات المخزنة
     */
    public void applyAllStoredBackgrounds() {
        System.out.println("BACKGROUND MANAGER: Applied " + backgroundConfigs.size() + " stored backgrounds");
    }

    /**
     * إعدادات الخلفية
     */
    public static final class BackgroundConfig {
        private final BackgroundType type;
        private final String value;

        public BackgroundConfig(BackgroundType type, String value) {
            this.type = type;
            this.value = value;
        }

        public BackgroundType getType() { return type; }
        public String getValue() { return value; }
    }

    /**
     * أنواع الخلفيات
     */
    public enum BackgroundType {
        COLOR, IMAGE_URI, LOCAL_IMAGE, GRADIENT, DEFAULT
    }
}