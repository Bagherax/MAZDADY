package mazdady.ui;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.net.Uri;
import android.provider.MediaStore;
import android.util.Base64;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ConcurrentHashMap;

/**
 * رفع الصور من الهاتف إلى التخزين المحلي مع دعم التحديث الفوري
 * يتبع نمط Strategy لفصل استراتيجيات التخزين
 */
public final class ImageUploader {
    private final Context context;
    private final ConcurrentHashMap<String, String> localImageCache = new ConcurrentHashMap<>();
    private final File imageStorageDir;
    private static ImageUploader instance;

    private ImageUploader(Context context) {
        this.context = context.getApplicationContext();
        this.imageStorageDir = new File(context.getFilesDir(), "images");
        if (!imageStorageDir.exists()) {
            imageStorageDir.mkdirs();
        }
    }

    public static synchronized ImageUploader getInstance(Context context) {
        if (instance == null) {
            instance = new ImageUploader(context);
        }
        return instance;
    }

    /**
     * رفع صورة من الهاتف غير متزامن
     */
    public CompletableFuture<UploadResult> uploadImageFromPhoneAsync(
        String elementId,
        Uri imageUri
    ) {
        return CompletableFuture.supplyAsync(() -> {
            try {
                if (imageUri == null) {
                    return UploadResult.failure("Invalid image URI");
                }
                
                // تحميل الصورة من الهاتف
                Bitmap bitmap = loadBitmapFromUri(imageUri);
                if (bitmap == null) {
                    return UploadResult.failure("Failed to load image from phone");
                }
                
                // تحويل الصورة إلى Base64
                String base64Image = encodeBitmapToBase64(bitmap);
                
                // حفظ الصورة محليًا
                String fileName = saveImageLocally(elementId, bitmap);
                
                // تخزين في الكاش
                localImageCache.put(elementId, fileName);
                
                System.out.println("IMAGE UPLOADER: Image uploaded for element " + elementId + 
                                 " - File: " + fileName);
                
                return UploadResult.success(fileName, base64Image, "Image uploaded successfully");
                
            } catch (Exception e) {
                return UploadResult.failure("Image upload failed: " + e.getMessage());
            }
        });
    }

    /**
     * تحميل الصورة من URI
     */
    private Bitmap loadBitmapFromUri(Uri uri) {
        try {
            InputStream inputStream = context.getContentResolver().openInputStream(uri);
            Bitmap bitmap = BitmapFactory.decodeStream(inputStream);
            inputStream.close();
            return bitmap;
        } catch (Exception e) {
            System.err.println("BITMAP LOAD ERROR: " + e.getMessage());
            return null;
        }
    }

    /**
     * تحويل الصورة إلى Base64
     */
    private String encodeBitmapToBase64(Bitmap bitmap) {
        try {
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            bitmap.compress(Bitmap.CompressFormat.PNG, 100, baos);
            byte[] imageBytes = baos.toByteArray();
            return Base64.encodeToString(imageBytes, Base64.DEFAULT);
        } catch (Exception e) {
            System.err.println("BASE64 ENCODE ERROR: " + e.getMessage());
            return "";
        }
    }

    /**
     * حفظ الصورة محليًا
     */
    private String saveImageLocally(String elementId, Bitmap bitmap) {
        try {
            String fileName = elementId + "_" + System.currentTimeMillis() + ".png";
            File imageFile = new File(imageStorageDir, fileName);
            
            FileOutputStream fos = new FileOutputStream(imageFile);
            bitmap.compress(Bitmap.CompressFormat.PNG, 100, fos);
            fos.close();
            
            System.out.println("IMAGE UPLOADER: Image saved locally - " + fileName);
            return fileName;
            
        } catch (Exception e) {
            System.err.println("LOCAL SAVE ERROR: " + e.getMessage());
            return "default_" + elementId + ".png";
        }
    }

    /**
     * تطبيق الصورة على عنصر واجهة المستخدم
     */
    public void applyImageToElement(String elementId, SmartElement element) {
        String fileName = localImageCache.get(elementId);
        if (fileName != null) {
            File imageFile = new File(imageStorageDir, fileName);
            if (imageFile.exists()) {
                // في الإنتاج: تطبيق الصورة على العنصر
                element.setBackground(MediaStore.Images.Media.getBitmap(
                    context.getContentResolver(),
                    Uri.fromFile(imageFile)
                ));
                System.out.println("IMAGE UPLOADER: Applied image to element " + elementId);
            }
        }
    }

    /**
     * إزالة صورة عنصر
     */
    public void removeImage(String elementId) {
        String fileName = localImageCache.remove(elementId);
        if (fileName != null) {
            File imageFile = new File(imageStorageDir, fileName);
            if (imageFile.exists()) {
                imageFile.delete();
                System.out.println("IMAGE UPLOADER: Removed image for element " + elementId);
            }
        }
    }

    /**
     * الحصول على مسار الصورة المحلية
     */
    public String getLocalImagePath(String elementId) {
        String fileName = localImageCache.get(elementId);
        return fileName != null ? new File(imageStorageDir, fileName).getAbsolutePath() : null;
    }

    /**
     * التحقق من وجود صورة للعنصر
     */
    public boolean hasImage(String elementId) {
        return localImageCache.containsKey(elementId);
    }

    /**
     * مسح جميع الصور (للاختبارات)
     */
    public void clearAllImages() {
        localImageCache.clear();
        File[] files = imageStorageDir.listFiles();
        if (files != null) {
            for (File file : files) {
                file.delete();
            }
        }
        System.out.println("IMAGE UPLOADER: Cleared all images");
    }

    /**
     * نتيجة الرفع
     */
    public static final class UploadResult {
        private final boolean success;
        private final String fileName;
        private final String base64Image;
        private final String message;

        private UploadResult(boolean success, String fileName, String base64Image, String message) {
            this.success = success;
            this.fileName = fileName;
            this.base64Image = base64Image;
            this.message = message;
        }

        public static UploadResult success(String fileName, String base64Image, String message) {
            return new UploadResult(true, fileName, base64Image, message);
        }

        public static UploadResult failure(String message) {
            return new UploadResult(false, null, null, message);
        }

        public boolean isSuccess() { return success; }
        public String getFileName() { return fileName; }
        public String getBase64Image() { return base64Image; }
        public String getMessage() { return message; }
    }
}