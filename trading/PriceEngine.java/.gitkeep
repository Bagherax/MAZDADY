package mazdady.trading;

import mazdady.admin.AdminConfig;
import mazdady.bot.EmergencyBot;

import java.time.Instant;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ThreadLocalRandom;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicDouble;
import java.util.concurrent.atomic.AtomicReference;

/**
 * محرك الأسعار مع دعم الارتفاع الديناميكي
 * يتبع نمط Observer لإعلام النظام بتغيرات السعر
 */
public final class PriceEngine {
    private final AtomicDouble currentPrice = new AtomicDouble(100.0);
    private final AtomicDouble marketTrend = new AtomicDouble(0.0);
    private final AtomicDouble volatility = new AtomicDouble(0.5);
    private final AtomicReference<Instant> lastUpdate = new AtomicReference<>(Instant.now());
    private final ScheduledExecutorService priceScheduler = Executors.newScheduledThreadPool(1);
    private final EmergencyBot emergencyBot;
    private static PriceEngine instance;

    private PriceEngine(EmergencyBot emergencyBot) {
        this.emergencyBot = emergencyBot;
        startPriceUpdates();
    }

    public static synchronized PriceEngine getInstance(EmergencyBot emergencyBot) {
        if (instance == null) {
            instance = new PriceEngine(emergencyBot);
        }
        return instance;
    }

    private void startPriceUpdates() {
        priceScheduler.scheduleAtFixedRate(
            this::updatePrice,
            0,
            5,
            TimeUnit.SECONDS
        );
        
        System.out.println("PRICE ENGINE: Started price updates every 5 seconds");
    }

    /**
     * تحديث السعر تلقائيًا
     */
    private void updatePrice() {
        try {
            double current = currentPrice.get();
            double trend = marketTrend.get();
            double vol = volatility.get();
            
            // توليد تغير عشوائي بناءً على التقلب والاتجاه
            double randomChange = (ThreadLocalRandom.current().nextDouble() - 0.5) * 2 * vol;
            double trendInfluence = trend * 0.1;
            double totalChange = randomChange + trendInfluence;
            
            // تطبيق التغيير على السعر
            double newPrice = current * (1 + totalChange / 100);
            
            // الحد الأدنى للسعر = 1 MAZDADY
            newPrice = Math.max(newPrice, 1.0);
            
            currentPrice.set(newPrice);
            lastUpdate.set(Instant.now());
            
            System.out.println("PRICE ENGINE: Price updated to " + String.format("%.4f", newPrice) + 
                             " MAZDADY (Change: " + String.format("%.2f", totalChange) + "%)");
            
        } catch (Exception e) {
            System.err.println("PRICE UPDATE ERROR: " + e.getMessage());
        }
    }

    /**
     * تنفيذ أمر شراء
     */
    public void executeBuyOrder(String userId, double amount) {
        try {
            double price = currentPrice.get();
            double totalPrice = amount * price;
            
            // زيادة الاتجاه الإيجابي
            marketTrend.updateAndGet(current -> Math.min(current + 0.1, 1.0));
            
            // زيادة التقلب قليلاً
            volatility.updateAndGet(current -> Math.min(current + 0.05, 1.0));
            
            System.out.println("PRICE ENGINE: BUY ORDER - User " + userId + 
                             " bought " + amount + " MAZDADY at " + String.format("%.4f", price) + 
                             " MAZDADY each (Total: " + String.format("%.2f", totalPrice) + " MAZDADY)");
            
        } catch (Exception e) {
            System.err.println("BUY ORDER ERROR: " + e.getMessage());
        }
    }

    /**
     * تنفيذ أمر بيع
     */
    public void executeSellOrder(String userId, double amount) {
        try {
            double price = currentPrice.get();
            double totalPrice = amount * price;
            
            // تقليل الاتجاه الإيجابي
            marketTrend.updateAndGet(current -> Math.max(current - 0.1, -1.0));
            
            // زيادة التقلب قليلاً
            volatility.updateAndGet(current -> Math.min(current + 0.05, 1.0));
            
            System.out.println("PRICE ENGINE: SELL ORDER - User " + userId + 
                             " sold " + amount + " MAZDADY at " + String.format("%.4f", price) + 
                             " MAZDADY each (Total: " + String.format("%.2f", totalPrice) + " MAZDADY)");
            
        } catch (Exception e) {
            System.err.println("SELL ORDER ERROR: " + e.getMessage());
        }
    }

    /**
     * رفع سعر MAZDADY يدويًا (من لوحة التحكم)
     */
    public void boostMAZDADYPrice(double percentage) {
        if (percentage <= 0) return;
        
        double current = currentPrice.get();
        double boostedPrice = current * (1 + percentage / 100);
        currentPrice.set(boostedPrice);
        
        System.out.println("PRICE ENGINE: MAZDADY price boosted by " + percentage + "% to " + 
                         String.format("%.4f", boostedPrice) + " MAZDADY");
    }

    /**
     * خفض سعر MAZDADY يدويًا (من بوت الطوارئ)
     */
    public void dropMAZDADYPrice(double percentage) {
        if (percentage <= 0) return;
        
        double current = currentPrice.get();
        double droppedPrice = current * (1 - percentage / 100);
        currentPrice.set(Math.max(droppedPrice, 1.0)); // الحد الأدنى = 1 MAZDADY
        
        System.out.println("PRICE ENGINE: MAZDADY price dropped by " + percentage + "% to " + 
                         String.format("%.4f", currentPrice.get()) + " MAZDADY");
    }

    // --- Getters ---
    public double getCurrentPrice() { return currentPrice.get(); }
    public double getMarketTrend() { return marketTrend.get(); }
    public double getVolatility() { return volatility.get(); }
    public Instant getLastUpdate() { return lastUpdate.get(); }
    
    /**
     * إيقاف المحرك (للاختبارات)
     */
    public void shutdown() {
        priceScheduler.shutdown();
        System.out.println("PRICE ENGINE: Shutdown completed");
    }
}