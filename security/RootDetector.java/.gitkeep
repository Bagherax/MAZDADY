package mazdady.security;

import android.content.Context;
import android.os.Build;

import java.io.File;
import java.util.Arrays;
import java.util.List;

/**
 * كاشف الجذور مع دعم الكشف المتقدم
 * يتبع نمط Strategy لفصل استراتيجيات الكشف
 */
public final class RootDetector {
    private static final List<String> ROOT_INDICATORS = Arrays.asList(
        "/system/app/Superuser.apk",
        "/sbin/su",
        "/system/bin/su",
        "/system/xbin/su",
        "/data/local/xbin/su",
        "/data/local/bin/su",
        "/system/sd/xbin/su",
        "/system/bin/failsafe/su",
        "/data/local/su",
        "/su/bin/su",
        "/su/xbin/su",
        "/magisk",
        "/sbin/magisk",
        "/system/bin/magisk",
        "/system/xbin/magisk"
    );
    
    private static final List<String> DANGEROUS_APPS = Arrays.asList(
        "com.noshufou.android.su",
        "com.thirdparty.superuser",
        "eu.chainfire.supersu",
        "com.koushikdutta.superuser",
        "com.koushikdutta.rommanager",
        "com.devadvance.rootcloak",
        "com.devadvance.rootcloakplus",
        "com.topjohnwu.magisk"
    );

    private RootDetector() {}

    /**
     * التحقق من وجود جذور في الجهاز غير متزامن
     */
    public static boolean isDeviceRooted() {
        return checkRootMethod1() || 
               checkRootMethod2() || 
               checkRootMethod3() || 
               checkRootMethod4();
    }

    /**
     * التحقق من علامات البناء
     */
    private static boolean checkRootMethod1() {
        String buildTags = android.os.Build.TAGS;
        return buildTags != null && buildTags.contains("test-keys");
    }

    /**
     * التحقق من الملفات المشبوهة
     */
    private static boolean checkRootMethod2() {
        for (String path : ROOT_INDICATORS) {
            if (new File(path).exists()) {
                System.err.println("ROOT DETECTOR: Root indicator found - " + path);
                return true;
            }
        }
        return false;
    }

    /**
     * التحقق من العمليات المشبوهة
     */
    private static boolean checkRootMethod3() {
        Process process = null;
        try {
            process = Runtime.getRuntime().exec(new String[] { "/system/xbin/which", "su" });
            return process.waitFor() == 0;
        } catch (Exception e) {
            return false;
        } finally {
            if (process != null) {
                process.destroy();
            }
        }
    }

    /**
     * التحقق من التطبيقات الخطيرة
     */
    private static boolean checkRootMethod4() {
        try {
            // في الإنتاج: التحقق من التطبيقات المثبتة
            return false; // محاكاة عدم وجود تطبيقات خطيرة
            
        } catch (Exception e) {
            return false;
        }
    }

    /**
     * التحقق من جهاز آمن
     */
    public static SecurityResult checkDeviceSecurity() {
        if (isDeviceRooted()) {
            return SecurityResult.risky("Rooted device detected");
        }
        
        if (Build.VERSION.SDK_INT < 21) { // أندرويد 5.0 فما فوق
            return SecurityResult.risky("Old Android version detected");
        }
        
        return SecurityResult.secure("Device is secure");
    }

    /**
     * نتيجة الأمان
     */
    public static final class SecurityResult {
        private final boolean secure;
        private final boolean risky;
        private final String message;

        private SecurityResult(boolean secure, boolean risky, String message) {
            this.secure = secure;
            this.risky = risky;
            this.message = message;
        }

        public static SecurityResult secure(String message) {
            return new SecurityResult(true, false, message);
        }

        public static SecurityResult risky(String message) {
            return new SecurityResult(false, true, message);
        }

        public boolean isSecure() { return secure; }
        public boolean isRisky() { return risky; }
        public String getMessage() { return message; }
    }

    // --- Getters ---
    public static int getRootIndicatorCount() { return ROOT_INDICATORS.size(); }
    public static int getDangerousAppCount() { return DANGEROUS_APPS.size(); }
    public static boolean hasRootIndicators() { return !ROOT_INDICATORS.isEmpty(); }
    public static boolean hasDangerousApps() { return !DANGEROUS_APPS.isEmpty(); }
    
    /**
     * إعادة تعيين كاشف الجذور (للاختبارات)
     */
    public static void reset() {
        System.out.println("ROOT DETECTOR: Reset completed");
    }
}