package mazdady.security;

import java.io.File;
import java.util.Arrays;
import java.util.List;

/**
 * كاشف الجذور مع دعم الكشف المتعدد المستويات
 * يتبع نمط Strategy لفصل طرق الكشف
 */
public final class RootDetector {
    private static final List<String> ROOT_INDICATORS = Arrays.asList(
        "/system/app/Superuser.apk",
        "/sbin/su",
        "/system/bin/su",
        "/system/xbin/su",
        "/data/local/xbin/su",
        "/data/local/bin/su",
        "/system/sd/xbin/su",
        "/system/bin/failsafe/su",
        "/data/local/su"
    );
    
    private static final List<String> DANGEROUS_APPS = Arrays.asList(
        "com.noshufou.android.su",
        "com.thirdparty.superuser",
        "eu.chainfire.supersu",
        "com.koushikdutta.superuser",
        "com.koushikdutta.rommanager"
    );

    private RootDetector() {}

    /**
     * التحقق من وجود جذور في الجهاز
     */
    public static boolean isDeviceRooted() {
        return checkRootMethod1() || checkRootMethod2() || checkRootMethod3();
    }

    /**
     * التحقق من علامات البناء
     */
    private static boolean checkRootMethod1() {
        String buildTags = android.os.Build.TAGS;
        return buildTags != null && buildTags.contains("test-keys");
    }

    /**
     * التحقق من الملفات المشبوهة
     */
    private static boolean checkRootMethod2() {
        for (String path : ROOT_INDICATORS) {
            if (new File(path).exists()) {
                return true;
            }
        }
        return false;
    }

    /**
     * التحقق من العمليات المشبوهة
     */
    private static boolean checkRootMethod3() {
        Process process = null;
        try {
            process = Runtime.getRuntime().exec(new String[] { "/system/xbin/which", "su" });
            return process.waitFor() == 0;
        } catch (Exception e) {
            return false;
        } finally {
            if (process != null) {
                process.destroy();
            }
        }
    }

    /**
     * التحقق من التطبيقات الخطيرة
     */
    public static boolean hasDangerousApps(android.content.Context context) {
        android.content.pm.PackageManager pm = context.getPackageManager();
        for (String packageName : DANGEROUS_APPS) {
            try {
                pm.getPackageInfo(packageName, 0);
                return true;
            } catch (android.content.pm.PackageManager.NameNotFoundException e) {
                // التطبيق غير موجود
            }
        }
        return false;
    }
}