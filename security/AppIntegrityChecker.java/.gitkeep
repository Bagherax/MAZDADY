package mazdady.security;

import android.content.Context;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.Signature;

import java.security.MessageDigest;
import java.util.Arrays;
import java.util.Base64;

/**
 * محقق سلامة التطبيق مع دعم التحقق المتقدم
 * يتبع نمط Singleton مع تهيئة آمنة
 */
public final class AppIntegrityChecker {
    private final Context context;
    private volatile String expectedSignature;
    private volatile boolean integrityValidated = false;
    private static AppIntegrityChecker instance;

    private AppIntegrityChecker(Context context) {
        this.context = context.getApplicationContext();
        loadExpectedSignature();
    }

    public static synchronized AppIntegrityChecker getInstance(Context context) {
        if (instance == null) {
            instance = new AppIntegrityChecker(context);
        }
        return instance;
    }

    private void loadExpectedSignature() {
        try {
            // في الإنتاج: تحميل البصمة من السيرفر الآمن
            this.expectedSignature = "YOUR_APP_SIGNATURE_HERE"; // محاكاة
            System.out.println("APP INTEGRITY CHECKER: Loaded expected signature");
            
        } catch (Exception e) {
            System.err.println("APP SIGNATURE LOAD ERROR: " + e.getMessage());
        }
    }

    /**
     * التحقق من سلامة التطبيق غير متزامن
     */
    public boolean isAppIntegrityValid() {
        if (integrityValidated) {
            return true;
        }
        
        try {
            String currentSignature = getCurrentAppSignature();
            boolean isValid = expectedSignature.equals(currentSignature);
            
            if (isValid) {
                integrityValidated = true;
                System.out.println("APP INTEGRITY CHECKER: App integrity validated");
            } else {
                System.err.println("APP INTEGRITY CHECKER: App integrity violated!");
                SecurityMonitor.getInstance(context).reportSuspiciousActivity(
                    "APP_INTEGRITY_VIOLATION", 
                    "Modified app detected"
                );
            }
            
            return isValid;
            
        } catch (Exception e) {
            System.err.println("APP INTEGRITY CHECK ERROR: " + e.getMessage());
            return false;
        }
    }

    private String getCurrentAppSignature() throws Exception {
        PackageManager pm = context.getPackageManager();
        PackageInfo packageInfo = pm.getPackageInfo(
            context.getPackageName(), 
            PackageManager.GET_SIGNATURES
        );
        
        if (packageInfo.signatures != null && packageInfo.signatures.length > 0) {
            Signature signature = packageInfo.signatures[0];
            MessageDigest digest = MessageDigest.getInstance("SHA-256");
            byte[] hash = digest.digest(signature.toByteArray());
            return Base64.getEncoder().encodeToString(hash);
        }
        
        throw new SecurityException("No app signature found");
    }

    /**
     * تحديث البصمة المتوقعة من الإعدادات الإدارية
     */
    public void updateExpectedSignature(String newSignature) {
        if (newSignature != null && !newSignature.isEmpty()) {
            this.expectedSignature = newSignature;
            this.integrityValidated = false; // إعادة التحقق
            System.out.println("APP INTEGRITY CHECKER: Expected signature updated");
        }
    }

    /**
     * إعادة تعيين التحقق (للاختبارات)
     */
    public void resetIntegrityCheck() {
        integrityValidated = false;
        System.out.println("APP INTEGRITY CHECKER: Integrity check reset");
    }

    // --- Getters ---
    public boolean isIntegrityValidated() { return integrityValidated; }
    public String getExpectedSignature() { return expectedSignature; }
    public String getCurrentSignature() { 
        try {
            return getCurrentAppSignature();
        } catch (Exception e) {
            return "ERROR_GETTING_SIGNATURE";
        }
    }
    
    /**
     * التحقق من سلامة التطبيق (للاختبارات)
     */
    public boolean verifyAppSignature() {
        return isAppIntegrityValid();
    }
}