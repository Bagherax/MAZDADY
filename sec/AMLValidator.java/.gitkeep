package mazdady.sec;

import mazdady.user.User;
import mazdady.user.UserManager;
import mazdady.wallet.WalletManager;
import mazdady.admin.AdminConfig;

import java.time.Instant;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ConcurrentHashMap;
import java.util.function.Predicate;

/**
 * مُحقّق مكافحة غسل الأموال مع دعم التحليل المتقدم
 * يتبع نمط Strategy لفصل استراتيجيات التحقق
 */
public final class AMLValidator {
    private final Map<String, Predicate<UserTransactionPattern>> amlRules = new ConcurrentHashMap<>();
    private final AdminConfig.AMLConfig amlConfig;
    private static AMLValidator instance;

    private AMLValidator(AdminConfig.AMLConfig amlConfig) {
        this.amlConfig = amlConfig;
        initializeAMLRules();
    }

    public static synchronized AMLValidator getInstance(AdminConfig.AMLConfig amlConfig) {
        if (instance == null) {
            instance = new AMLValidator(amlConfig);
        }
        return instance;
    }

    private void initializeAMLRules() {
        // قاعدة الكشف عن التحويلات المتكررة
        amlRules.put("frequent_transfers", pattern -> 
            pattern.getTransactionCountLastHour() > amlConfig.getMaxTransactionsPerHour()
        );
        
        // قاعدة الكشف عن المبالغ الكبيرة
        amlRules.put("large_amounts", pattern -> 
            pattern.getLargestTransaction() > amlConfig.getMaxTransactionAmount()
        );
        
        // قاعدة الكشف عن التحويلات المشبوهة
        amlRules.put("suspicious_patterns", pattern -> 
            pattern.getSuspiciousActivityScore() > amlConfig.getSuspiciousThreshold()
        );
        
        // قاعدة الكشف عن التحويلات السريعة
        amlRules.put("rapid_transfers", pattern -> 
            pattern.getAverageTransferTime() < amlConfig.getMinTransferInterval()
        );
        
        // قاعدة الكشف عن التحويلات المتسلسلة
        amlRules.put("sequential_transfers", pattern -> 
            pattern.getSequentialTransferCount() > amlConfig.getMaxSequentialTransfers()
        );
        
        System.out.println("AML VALIDATOR: Initialized " + amlRules.size() + " AML rules");
    }

    /**
     * التحقق من نشاط المستخدم غير متزامن
     */
    public CompletableFuture<AMLResult> validateUserActivityAsync(String userId) {
        return CompletableFuture.supplyAsync(() -> {
            try {
                User user = UserManager.getInstance(null).getUserById(userId);
                if (user == null) {
                    return AMLResult.failure("User not found");
                }
                
                // جمع نمط المعاملات
                UserTransactionPattern pattern = collectTransactionPattern(user);
                
                // تطبيق قواعد AML
                for (Map.Entry<String, Predicate<UserTransactionPattern>> rule : amlRules.entrySet()) {
                    if (rule.getValue().test(pattern)) {
                        String ruleName = rule.getKey();
                        String message = "AML violation detected: " + ruleName;
                        
                        // إبلاغ النظام الأمني
                        SecurityMonitor.getInstance(null).reportSuspiciousActivity(userId, message);
                        
                        // تجميد الحساب مؤقتًا
                        UserManager.getInstance(null).freezeUserAccount(userId, message);
                        
                        System.out.println("AML VALIDATOR: " + message + " for user " + userId);
                        return AMLResult.suspicious(message);
                    }
                }
                
                System.out.println("AML VALIDATOR: User " + userId + " passed AML validation");
                return AMLResult.clean("User passed AML validation");
                
            } catch (Exception e) {
                return AMLResult.failure("AML validation failed: " + e.getMessage());
            }
        });
    }

    private UserTransactionPattern collectTransactionPattern(User user) {
        try {
            // في الإنتاج: جمع البيانات من قاعدة البيانات
            WalletManager wallet = new WalletManager();
            return new UserTransactionPattern(
                user.getUserId(),
                wallet.getTransactionHistory().size(),
                wallet.getLargestTransaction(),
                wallet.getSuspiciousActivityScore(),
                wallet.getAverageTransferTime(),
                wallet.getSequentialTransferCount(),
                Instant.now()
            );
            
        } catch (Exception e) {
            return UserTransactionPattern.empty(user.getUserId());
        }
    }

    /**
     * تحديث قواعد AML من الإعدادات الإدارية
     */
    public void updateAMLRulesFromConfig(AdminConfig.AMLConfig newConfig) {
        if (newConfig != null) {
            // في الإنتاج: تحديث القواعد حسب الإعدادات الإدارية
            System.out.println("AML VALIDATOR: Updated AML rules from admin config");
        }
    }

    /**
     * نتيجة AML
     */
    public static final class AMLResult {
        private final boolean success;
        private final boolean suspicious;
        private final String message;

        private AMLResult(boolean success, boolean suspicious, String message) {
            this.success = success;
            this.suspicious = suspicious;
            this.message = message;
        }

        public static AMLResult clean(String message) {
            return new AMLResult(true, false, message);
        }

        public static AMLResult suspicious(String message) {
            return new AMLResult(true, true, message);
        }

        public static AMLResult failure(String message) {
            return new AMLResult(false, false, message);
        }

        public boolean isSuccess() { return success; }
        public boolean isSuspicious() { return suspicious; }
        public String getMessage() { return message; }
    }

    /**
     * نمط معاملات المستخدم
     */
    public static final class UserTransactionPattern {
        private final String userId;
        private final int transactionCountLastHour;
        private final double largestTransaction;
        private final double suspiciousActivityScore;
        private final long averageTransferTime;
        private final int sequentialTransferCount;
        private final Instant timestamp;

        public UserTransactionPattern(String userId, int transactionCountLastHour, 
                                    double largestTransaction, double suspiciousActivityScore,
                                    long averageTransferTime, int sequentialTransferCount, 
                                    Instant timestamp) {
            this.userId = userId;
            this.transactionCountLastHour = transactionCountLastHour;
            this.largestTransaction = largestTransaction;
            this.suspiciousActivityScore = suspiciousActivityScore;
            this.averageTransferTime = averageTransferTime;
            this.sequentialTransferCount = sequentialTransferCount;
            this.timestamp = timestamp;
        }

        public static UserTransactionPattern empty(String userId) {
            return new UserTransactionPattern(userId, 0, 0, 0, 0, 0, Instant.now());
        }

        // Getters
        public String getUserId() { return userId; }
        public int getTransactionCountLastHour() { return transactionCountLastHour; }
        public double getLargestTransaction() { return largestTransaction; }
        public double getSuspiciousActivityScore() { return suspiciousActivityScore; }
        public long getAverageTransferTime() { return averageTransferTime; }
        public int getSequentialTransferCount() { return sequenti