package mazdady.preview;

import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.util.AttributeSet;
import android.view.View;

import mazdady.admin.AdminConfig;
import mazdady.ui.DynamicLayoutManager;

import java.time.Instant;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

/**
 * حقل معاينة مع دعم العرض الديناميكي
 * يتبع نمط Observer لإعلام النظام بتغيرات المعاينة
 */
public final class PreviewField extends View {
    private final Paint previewPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
    private final ScheduledExecutorService previewScheduler = Executors.newScheduledThreadPool(1);
    private volatile PreviewState currentState = PreviewState.LOADING;
    private volatile String previewContent = "";
    private volatile int animationFrame = 0;
    private static PreviewField instance;

    public PreviewField(Context context, AttributeSet attrs) {
        super(context, attrs);
        initializePaint();
        startPreviewAnimation();
    }

    private void initializePaint() {
        previewPaint.setColor(Color.WHITE);
        previewPaint.setTextSize(16f);
        previewPaint.setTextAlign(Paint.Align.CENTER);
        previewPaint.setFakeBoldText(true);
    }

    private void startPreviewAnimation() {
        previewScheduler.scheduleAtFixedRate(
            this::updatePreviewAnimation,
            0,
            500,
            TimeUnit.MILLISECONDS
        );
        
        System.out.println("PREVIEW FIELD: Started preview animation every 500ms");
    }

    /**
     * تحديث حقل المعاينة غير متزامن
     */
    public void updatePreviewAsync(String content, PreviewState state) {
        post(() -> {
            try {
                this.previewContent = content != null ? content : "";
                this.currentState = state != null ? state : PreviewState.LOADING;
                
                // تطبيق إعدادات المعاينة من لوحة التحكم الإدارية
                applyPreviewConfig();
                
                invalidate(); // إعادة رسم العرض
                System.out.println("PREVIEW FIELD: Updated preview - " + state + " - " + content);
                
            } catch (Exception e) {
                System.err.println("PREVIEW UPDATE ERROR: " + e.getMessage());
            }
        });
    }

    private void updatePreviewAnimation() {
        post(() -> {
            try {
                animationFrame = (animationFrame + 1) % 10;
                invalidate(); // إعادة رسم العرض مع التحديث
                
                System.out.println("PREVIEW FIELD: Animation frame updated - " + animationFrame);
                
            } catch (Exception e) {
                System.err.println("PREVIEW ANIMATION ERROR: " + e.getMessage());
            }
        });
    }

    private void applyPreviewConfig() {
        try {
            AdminConfig.UIConfig uiConfig = AdminConfig.getInstance().getUIConfig();
            AdminConfig.UIConfig.PreviewFieldConfig previewConfig = uiConfig.getPreviewFieldConfig();
            
            if (previewConfig != null) {
                // تطبيق الألوان
                previewPaint.setColor(Color.parseColor(previewConfig.getTextColor()));
                
                // تطبيق الحجم
                previewPaint.setTextSize(previewConfig.getTextSize());
                
                // تطبيق الخط
                if (previewConfig.isBoldText()) {
                    previewPaint.setFakeBoldText(true);
                }
                
                System.out.println("PREVIEW FIELD: Applied config from admin panel");
            }
            
        } catch (Exception e) {
            System.err.println("PREVIEW CONFIG ERROR: " + e.getMessage());
        }
    }

    @Override
    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);
        
        try {
            int width = getWidth();
            int height = getHeight();
            
            // رسم خلفية الحقل
            drawBackground(canvas, width, height);
            
            // رسم محتوى المعاينة
            drawPreviewContent(canvas, width, height);
            
            // رسم مؤشر الحالة
            drawStatusIndicator(canvas, width, height);
            
        } catch (Exception e) {
            System.err.println("PREVIEW DRAW ERROR: " + e.getMessage());
        }
    }

    private void drawBackground(Canvas canvas, int width, int height) {
        // في الإنتاج: رسم خلفية حقل المعاينة
        canvas.drawColor(Color.parseColor("#1a1a2e"));
        
        // رسم حدود الحقل
        previewPaint.setStyle(Paint.Style.STROKE);
        previewPaint.setColor(Color.parseColor("#4CAF50"));
        previewPaint.setStrokeWidth(2f);
        canvas.drawRect(0, 0, width, height, previewPaint);
        previewPaint.setStyle(Paint.Style.FILL);
    }

    private void drawPreviewContent(Canvas canvas, int width, int height) {
        String displayContent = getDisplayContent();
        float x = width / 2f;
        float y = height / 2f + 5; // تعويض لمحاذاة النص
        
        canvas.drawText(displayContent, x, y, previewPaint);
    }

    private String getDisplayContent() {
        switch (currentState) {
            case LOADING:
                return "جاري التحميل" + ".".repeat(animationFrame % 4);
            case SUCCESS:
                return previewContent.isEmpty() ? "تم التحميل" : previewContent;
            case ERROR:
                return previewContent.isEmpty() ? "فشل التحميل" : "❌ " + previewContent;
            case EMPTY:
                return "لا توجد بيانات";
            case PROCESSING:
                return "قيد المعالجة...";
            default:
                return previewContent;
        }
    }

    private void drawStatusIndicator(Canvas canvas, int width, int height) {
        int indicatorSize = 12;
        int indicatorX = width - indicatorSize - 10;
        int indicatorY = height - indicatorSize - 10;
        
        Paint indicatorPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
        indicatorPaint.setStyle(Paint.Style.FILL);
        
        switch (currentState) {
            case LOADING:
                indicatorPaint.setColor(Color.YELLOW);
                break;
            case SUCCESS:
                indicatorPaint.setColor(Color.GREEN);
                break;
            case ERROR:
                indicatorPaint.setColor(Color.RED);
                break;
            case EMPTY:
            