package mazdady.error;

import android.app.Activity;
import android.app.Application;
import android.content.Context;

import mazdady.user.User;
import mazdady.user.UserManager;

import java.lang.Thread.UncaughtExceptionHandler;
import java.time.Instant;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.function.Consumer;

/**
 * معالج الاستثناءات العالمي مع دعم التقارير المتقدمة
 * يتبع نمط Observer لإعلام المكونات بالأخطاء غير المعالجة
 */
public final class GlobalExceptionHandler implements UncaughtExceptionHandler {
    private final UncaughtExceptionHandler defaultHandler;
    private final CrashReporter crashReporter;
    private final CopyOnWriteArrayList<Consumer<ErrorEvent>> errorListeners = new CopyOnWriteArrayList<>();
    private static GlobalExceptionHandler instance;

    private GlobalExceptionHandler(CrashReporter crashReporter) {
        this.defaultHandler = Thread.getDefaultUncaughtExceptionHandler();
        this.crashReporter = crashReporter;
        Thread.setDefaultUncaughtExceptionHandler(this);
    }

    public static synchronized GlobalExceptionHandler getInstance(CrashReporter crashReporter) {
        if (instance == null) {
            instance = new GlobalExceptionHandler(crashReporter);
        }
        return instance;
    }

    @Override
    public void uncaughtException(Thread thread, Throwable throwable) {
        ErrorEvent event = new ErrorEvent(throwable, Instant.now(), getCurrentActivity());
        
        // إعلام المستمعين
        notifyErrorListeners(event);
        
        // حفظ تقرير العطل
        crashReporter.saveCrashReportAsync(event);
        
        System.out.println("GLOBAL EXCEPTION HANDLER: Uncaught exception - " + 
                         throwable.getClass().getSimpleName() + ": " + throwable.getMessage());
        
        // استدعاء المعالج الافتراضي (لإنهاء التطبيق)
        if (defaultHandler != null) {
            defaultHandler.uncaughtException(thread, throwable);
        }
    }

    /**
     * معالجة استثناء مُcaught غير متزامن
     */
    public CompletableFuture<HandleResult> handleCaughtExceptionAsync(
        Throwable throwable, 
        String context
    ) {
        return CompletableFuture.supplyAsync(() -> {
            try {
                ErrorEvent event = new ErrorEvent(throwable, Instant.now(), context);
                notifyErrorListeners(event);
                
                // في الإنتاج: تسجيل الخطأ في السجل
                System.err.println("CAUGHT EXCEPTION: " + context + " - " + 
                                 throwable.getClass().getSimpleName() + ": " + throwable.getMessage());
                
                return HandleResult.success("Exception handled successfully");
                
            } catch (Exception e) {
                return HandleResult.failure("Exception handling failed: " + e.getMessage());
            }
        });
    }

    private void notifyErrorListeners(ErrorEvent event) {
        errorListeners.forEach(listener -> {
            try {
                listener.accept(event);
            } catch (Exception e) {
                // تجاهل أخطاء المستمعين
            }
        });
    }

    public void addErrorListener(Consumer<ErrorEvent> listener) {
        if (listener != null) {
            errorListeners.add(listener);
            System.out.println("GLOBAL EXCEPTION HANDLER: Added error listener");
        }
    }

    public void removeErrorListener(Consumer<ErrorEvent> listener) {
        errorListeners.remove(listener);
        System.out.println("GLOBAL EXCEPTION HANDLER: Removed error listener");
    }

    private Activity getCurrentActivity() {
        // في الإنتاج: الحصول من ActivityLifecycleCallbacks
        return null; // محاكاة
    }

    /**
     * حدث الخطأ
     */
    public static final class ErrorEvent {
        private final Throwable throwable;
        private final Instant timestamp;
        private final Object context;

        public ErrorEvent(Throwable throwable, Instant timestamp, Object context) {
            this.throwable = throwable;
            this.timestamp = timestamp;
            this.context = context;
        }

        // Getters
        public Throwable getThrowable() { return throwable; }
        public Instant getTimestamp() { return timestamp; }
        public Object getContext() { return context; }
        
        @Override
        public String toString() {
            return "ErrorEvent{" +
                "type=" + (throwable != null ? throwable.getClass().getSimpleName() : "null") +
                ", message='" + (throwable != null ? throwable.getMessage() : "null") + '\'' +
                ", timestamp=" + timestamp +
                ", context=" + context +
                '}';
        }
    }

    /**
     * نتيجة المعالجة
     */
    public static final class HandleResult {
        private final boolean success;
        private final String message;

        private HandleResult(boolean success, String message) {
            this.success = success;
            this.message = message;
        }

        public static HandleResult success(String message) {
            return new HandleResult(true, message);
        }

        public static HandleResult failure(String message) {
            return new HandleResult(false, message);
        }

        public boolean isSuccess() { return success; }
        public String getMessage() { return message; }
    }
}