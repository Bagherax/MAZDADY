package mazdady.team;

import mazdady.trading.PriceEngine;
import mazdady.user.User;
import mazdady.user.UserManager;

import java.util.List;
import java.util.concurrent.ThreadLocalRandom;

/**
 * فريق البيع الذكي مع دعم الاستراتيجيات الديناميكية
 * يتبع نمط Strategy لفصل استراتيجيات البيع
 */
public final class SellingTeam {
    private final String teamId = "SELL_TEAM";
    private volatile double teamHoldings = 5000.0;
    private final PriceEngine priceEngine;
    private volatile boolean isActive = true;

    public SellingTeam(PriceEngine priceEngine) {
        this.priceEngine = priceEngine;
    }

    /**
     * تنفيذ صفقات البيع الذكية
     */
    public void executeTrades(List<User> realUsers) {
        if (!isActive) return;
        
        double currentPrice = priceEngine.getCurrentPrice();
        double marketTrend = priceEngine.getMarketTrend();
        double volatility = priceEngine.getVolatility();
        
        // تحديد عدد الصفقات حسب الاتجاه والتقلب
        int tradeCount = (int) (3 + (Math.abs(marketTrend) * 4) + (volatility * 3));
        if (tradeCount < 1) tradeCount = 1;
        if (tradeCount > 15) tradeCount = 15; // حد أقصى
        
        for (int i = 0; i < tradeCount && teamHoldings > 5; i++) {
            // تحديد مبلغ الصفقة عشوائيًا مع مراعاة المقتنيات
            double maxTradeAmount = Math.min(teamHoldings * 0.15, 300.0); // 15% من المقتنيات أو 300
            double amount = ThreadLocalRandom.current().nextDouble(5, maxTradeAmount);
            
            if (teamHoldings >= amount) {
                // تنفيذ أمر البيع
                priceEngine.executeSellOrder(teamId, amount);
                teamHoldings -= amount;
                
                // إشعار المستخدمين الحقيقيين
                if (!realUsers.isEmpty()) {
                    User randomUser = realUsers.get(
                        ThreadLocalRandom.current().nextInt(realUsers.size())
                    );
                    randomUser.notify("فريق البيع نشط — السعر ينخفض!");
                }
                
                System.out.println("SELL TEAM: Executed sell order of " + amount + " MAZDADY");
            }
        }
    }

    /**
     * إضافة مقتنيات للفريق
     */
    public void addHoldings(double coins) {
        if (coins > 0) {
            this.teamHoldings += coins;
            System.out.println("SELL TEAM: Holdings increased by " + coins + " (Total: " + teamHoldings + ")");
        }
    }

    /**
     * تفعيل الفريق
     */
    public void activate() {
        this.isActive = true;
        System.out.println("SELL TEAM: Activated");
    }

    /**
     * تعطيل الفريق
     */
    public void deactivate() {
        this.isActive = false;
        System.out.println("SELL TEAM: Deactivated");
    }

    // --- Getters ---
    public String getTeamId() { return teamId; }
    public double getHoldings() { return teamHoldings; }
    public boolean isActive() { return isActive; }
    public void setHoldings(double holdings) { this.teamHoldings = holdings; }
}