package mazdady.withdrawal;

import mazdady.admin.AdminConfig;

import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

/**
 * مدير طرق السحب مع دعم الإضافة الديناميكية
 * يتبع نمط Strategy لفصل استراتيجيات الطرق
 */
public final class WithdrawalMethodManager {
    private final Map<String, WithdrawalMethod> methods = new ConcurrentHashMap<>();
    private static WithdrawalMethodManager instance;

    private WithdrawalMethodManager() {
        initializeDefaultMethods();
    }

    public static synchronized WithdrawalMethodManager getInstance() {
        if (instance == null) {
            instance = new WithdrawalMethodManager();
        }
        return instance;
    }

    private void initializeDefaultMethods() {
        methods.put("wallet_crypto", new CryptoWalletMethod());
        methods.put("bank_transfer", new BankTransferMethod());
        methods.put("internal_transfer", new InternalTransferMethod());
        methods.put("mobile_wallet", new MobileWalletMethod());
        
        System.out.println("METHOD MANAGER: Initialized with " + methods.size() + " withdrawal methods");
    }

    /**
     * إضافة طريقة سحب جديدة
     */
    public void addMethod(String methodId, WithdrawalMethod method) {
        if (methodId != null && method != null) {
            methods.put(methodId, method);
            System.out.println("METHOD MANAGER: Added new withdrawal method - " + methodId);
        }
    }

    /**
     * إزالة طريقة سحب
     */
    public void removeMethod(String methodId) {
        if (methodId != null) {
            methods.remove(methodId);
            System.out.println("METHOD MANAGER: Removed withdrawal method - " + methodId);
        }
    }

    /**
     * الحصول على طريقة سحب
     */
    public WithdrawalMethod getMethod(String methodId) {
        return methods.get(methodId);
    }

    /**
     * التحقق من توفر طريقة السحب
     */
    public boolean isMethodAvailable(String methodId) {
        WithdrawalMethod method = methods.get(methodId);
        return method != null && method.isAvailable();
    }

    /**
     * تحديث طرق السحب من الإعدادات الإدارية
     */
    public void updateMethodsFromConfig(AdminConfig.WithdrawalConfig config) {
        // في الإنتاج: تحديث الطرق حسب الإعدادات الإدارية
        System.out.println("METHOD MANAGER: Methods updated from admin config");
    }

    /**
     * الحصول على جميع الطرق المتاحة
     */
    public Map<String, WithdrawalMethod> getAvailableMethods() {
        return methods.entrySet().stream()
            .filter(entry -> entry.getValue().isAvailable())
            .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));
    }

    /**
     * واجهة طريقة السحب
     */
    @FunctionalInterface
    public interface WithdrawalMethod {
        boolean isAvailable();
        String getDisplayName();
        String getDescription();
        double getMinimumAmount();
        double getMaximumAmount();
    }

    // --- طرق السحب المدمجة ---
    private static final class CryptoWalletMethod implements WithdrawalMethod {
        @Override public boolean isAvailable() { return true; }
        @Override public String getDisplayName() { return "محفظة رقمية"; }
        @Override public String getDescription() { return "سحب إلى محفظة العملات الرقمية"; }
        @Override public double getMinimumAmount() { return 10.0; }
        @Override public double getMaximumAmount() { return 10000.0; }
    }

    private static final class BankTransferMethod implements WithdrawalMethod {
        @Override public boolean isAvailable() { return true; }
        @Override public String getDisplayName() { return "تحويل بنكي"; }
        @Override public String getDescription() { return "سحب إلى حساب بنكي"; }
        @Override public double getMinimumAmount() { return 50.0; }
        @Override public double getMaximumAmount() { return 50000.0; }
    }

    private static final class InternalTransferMethod implements WithdrawalMethod {
        @Override public boolean isAvailable() { return true; }
        @Override public String getDisplayName() { return "تحويل داخلي"; }
        @Override public String getDescription() { return "تحويل إلى مستخدم آخر في MAZDADY"; }
        @Override public double getMinimumAmount() { return 1.0; }
        @Override public double getMaximumAmount() { return 1000.0; }
    }

    private static final class MobileWalletMethod implements WithdrawalMethod {
        @Override public boolean isAvailable() { return true; }
        @Override public String getDisplayName() { return "محفظة جوال"; }
        @Override public String getDescription() { return "سحب إلى محفظة جوال (STC Pay, Mada, إلخ)"; }
        @Override public double getMinimumAmount() { return 5.0; }
        @Override public double getMaximumAmount() { return 5000.0; }
    }
}