package mazdady.emergency;

import mazdady.offline.Connectivity;
import mazdady.offline.QueueMgr;
import mazdady.user.User;
import mazdady.user.UserManager;
import mazdady.wallet.WalletManager;
import mazdady.admin.AdminConfig;

import java.time.Instant;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;

/**
 * محرك المزامنة مع دعم الاسترداد التلقائي
 * يتبع نمط Observer لإعلام النظام بتغيرات المزامنة
 */
public final class SyncEngine {
    private final Connectivity connectivity;
    private final QueueMgr queueMgr;
    private final ScheduledExecutorService syncScheduler = Executors.newScheduledThreadPool(1);
    private final Map<String, Consumer<SyncEvent>> syncListeners = new ConcurrentHashMap<>();
    private static SyncEngine instance;

    private SyncEngine(Connectivity connectivity, QueueMgr queueMgr) {
        this.connectivity = connectivity;
        this.queueMgr = queueMgr;
        startSyncMonitoring();
    }

    public static synchronized SyncEngine getInstance(Connectivity connectivity, QueueMgr queueMgr) {
        if (instance == null) {
            instance = new SyncEngine(connectivity, queueMgr);
        }
        return instance;
    }

    private void startSyncMonitoring() {
        syncScheduler.scheduleAtFixedRate(
            this::checkSyncStatus,
            0,
            15,
            TimeUnit.SECONDS
        );
        
        System.out.println("SYNC ENGINE: Started monitoring every 15 seconds");
    }

    /**
     * التحقق من حالة المزامنة بشكل دوري
     */
    private void checkSyncStatus() {
        try {
            if (connectivity.isConnected()) {
                if (queueMgr.hasPendingOperations()) {
                    performSync();
                } else {
                    notifySyncListeners(new SyncEvent(
                        SyncEventType.NO_PENDING_OPERATIONS,
                        "No pending operations to sync",
                        Instant.now()
                    ));
                }
            } else {
                notifySyncListeners(new SyncEvent(
                    SyncEventType.OFFLINE_MODE,
                    "Device is offline - Sync paused",
                    Instant.now()
                ));
            }
            
        } catch (Exception e) {
            System.err.println("SYNC STATUS CHECK ERROR: " + e.getMessage());
        }
    }

    /**
     * تنفيذ المزامنة غير متزامن
     */
    public CompletableFuture<SyncResult> performSyncAsync() {
        return CompletableFuture.supplyAsync(() -> {
            try {
                if (!connectivity.isConnected()) {
                    return SyncResult.failure("Device is offline");
                }
                
                int pendingOperations = queueMgr.getOperationCount();
                if (pendingOperations == 0) {
                    return SyncResult.success(0, "No operations to sync");
                }
                
                // في الإنتاج: مزامنة العمليات مع السيرفر
                int syncedOperations = syncPendingOperations();
                
                System.out.println("SYNC ENGINE: Synced " + syncedOperations + 
                                 " operations successfully");
                
                return SyncResult.success(syncedOperations, 
                    "Synced " + syncedOperations + " operations");
                
            } catch (Exception e) {
                return SyncResult.failure("Sync failed: " + e.getMessage());
            }
        });
    }

    private void performSync() {
        performSyncAsync().thenAccept(result -> {
            if (result.isSuccess()) {
                notifySyncListeners(new SyncEvent(
                    SyncEventType.SYNC_COMPLETED,
                    result.getMessage(),
                    Instant.now()
                ));
            } else {
                notifySyncListeners(new SyncEvent(
                    SyncEventType.SYNC_FAILED,
                    result.getMessage(),
                    Instant.now()
                ));
            }
        });
    }

    private int syncPendingOperations() {
        // في الإنتاج: مزامنة العمليات مع السيرفر
        int pendingCount = queueMgr.getOperationCount();
        System.out.println("SYNC ENGINE: Syncing " + pendingCount + " pending operations");
        
        // محاكاة المزامنة
        try {
            Thread.sleep(2000); // محاكاة زمن المزامنة
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
        
        return pendingCount;
    }

    /**
     * استرداد البيانات عند الاتصال
     */
    public void recoverDataOnConnection() {
        if (connectivity.isConnected()) {
            System.out.println("SYNC ENGINE: Recovering data on connection");
            
            // في الإنتاج: استرداد البيانات من السيرفر
            UserManager userManager = UserManager.getInstance(null);
            WalletManager walletManager = new WalletManager();
            
            // تحديث الرصيد
            User currentUser = userManager.getCurrentUser();
            double serverBalance = fetchBalanceFromServer(currentUser.getUserId());
            if (serverBalance > currentUser.getBalance()) {
                currentUser.setBalance(serverBalance);
                System.out.println("SYNC ENGINE: Balance updated to " + 
                                 String.format("%.2f", serverBalance) + " MAZDADY");
            }
            
            // إرسال إشعار للمستخدم
            notifySyncListeners(new SyncEvent(
                SyncEventType.DATA_RECOVERED,
                "Data recovered successfully",
                Instant.now()
            ));
        }
    }

    private double fetchBalanceFromServer(String userId) {
        // في الإنتاج: جلب الرصيد من السيرفر
        return ThreadLocalRandom.current().nextDouble(1000, 10000); // محاكاة الرصيد
    }

    /**
     * إضافة مستمع لأحداث المزامنة
     */
    public void addSyncListener(String listenerId, Consumer<SyncEvent> listener) {
        if (listenerId != null && listener != null) {
            syncListeners.put(listenerId, listener);
            System.out.println("SYNC ENGINE: Added sync listener - " + listenerId);
        }
    }

    /**
     * إزالة مستمع لأحداث المزامنة
     */
    public void removeSyncListener(String listenerId) {
        if (listenerId != null) {
            syncListeners.remove(listenerId);
            System.out.println("SYNC ENGINE: Removed sync listener - " + listenerId);
        }
    }

    private void notifySyncListeners(SyncEvent event) {
        syncListeners.values().forEach(listener -> {
            try {
                listener.accept(event);
            } catch (Exception e) {
                // تجاهل أخطاء المستمعين
            }
        });
    }

    /**
     * تحديث إعدادات المزامنة من الإعدادات الإدارية
     */
    public void updateSyncConfig(AdminConfig.SyncConfig config) {
        if (config != null) {
            System.out.println("SYNC ENGINE: Updated sync config from admin");
        }
    }

    /**
     * إيقاف المزامنة (للاختبارات)
     */
    public void shutdown() {
        syncScheduler.shutdown();
        syncListeners.clear();
        System.out.println("SYNC ENGINE: Shutdown completed");
    }

    /**
     * حدث المزامنة
     */
    public static final class SyncEvent {
        private final SyncEventType type;
        private final String message;
        private final Instant timestamp;

        public SyncEvent(SyncEventType type, String message, Instant timestamp) {
            this.type = type;
            this.message = message;
            this.timestamp = timestamp;
        }

        // Getters
        public SyncEventType getType() { return type; }
        public String getMessage() { return message; }
        public Instant getTimestamp() { return timestamp; }
        
        @Override
        public String toString() {
            return "SyncEvent{" +
                "type=" + type +
                ", message='" + message + '\'' +
                ", timestamp=" + timestamp +
                '}';
        }
    }

    /**
     * أنواع أحداث المزامنة
     */
    public enum SyncEventType {
        SYNC_STARTED, SYNC_COMPLETED, SYNC_FAILED, 
        NO_PENDING_OPERATIONS, OFFLINE_MODE, DATA_RECOVERED
    }

    /**
     * نتيجة المزامنة
     */
    public static final class SyncResult {
        private final boolean success;
        private final int syncedOperations;
        private final String message;

        private SyncResult(boolean success, int syncedOperations, String message) {
            this.success = success;
            this.syncedOperations = syncedOperations;
            this.message = message;
        }

        public static SyncResult success(int syncedOperations, String message) {
            return new SyncResult(true, syncedOperations, message);
        }

        public static SyncResult failure(String message) {
            return new SyncResult(false, 0, message);
        }

        public boolean isSuccess() { return success; }
        public int getSyncedOperations() { return syncedOperations; }
        public String getMessage() { return message; }
    }

    // --- Getters ---
    public int getSyncListenerCount() { return syncListeners.size(); }
    public boolean isSyncActive() { return !syncScheduler.isShutdown(); }
    public int getPendingOperationsCount() { return queueMgr.getOperationCount(); }
    public Map<String, Consumer<SyncEvent>> getSyncListeners() { 
        return new ConcurrentHashMap<>(syncListeners); 
    }
    
    /**
     * إعادة تعيين المحرك (للاختبارات)
     */
    public void reset() {
        syncListeners.clear();
        System.out.println("SYNC ENGINE: Reset completed");
    }
}