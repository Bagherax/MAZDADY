package mazdady.bot;

import mazdady.trading.PriceEngine;
import mazdady.user.UserManager;

import java.time.Instant;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicReference;

/**
 * البوت التجاري الأساسي مع دعم التفاعل المتقدم
 * يتبع نمط Strategy لفصل استراتيجيات التداول
 */
public abstract class TradingBot {
    protected final String botId;
    protected final PriceEngine priceEngine;
    protected final AtomicReference<Double> capital = new AtomicReference<>(0.0);
    protected final AtomicBoolean isActive = new AtomicBoolean(false);
    protected final Instant createdAt = Instant.now();

    protected TradingBot(String botId, PriceEngine priceEngine) {
        this.botId = botId;
        this.priceEngine = priceEngine;
    }

    /**
     * بدء تشغيل البوت
     */
    public abstract void start();

    /**
     * إيقاف تشغيل البوت
     */
    public abstract void stop();

    /**
     * تنفيذ صفقة تجارية
     */
    public abstract void executeTrade(TradeType tradeType, double amount);

    /**
     * تعيين رأس المال
     */
    public void setCapital(double capital) {
        this.capital.set(capital);
        System.out.println("TRADING BOT: Capital set to " + capital + " MAZDADY for bot " + botId);
    }

    /**
     * إضافة رأس مال
     */
    public void addCapital(double amount) {
        if (amount > 0) {
            this.capital.updateAndGet(current -> current + amount);
            System.out.println("TRADING BOT: Added " + amount + " MAZDADY to bot " + botId);
        }
    }

    /**
     * خصم رأس مال
     */
    public boolean deductCapital(double amount) {
        if (amount <= 0) return false;
        
        return this.capital.getAndUpdate(current -> {
            if (current >= amount) {
                return current - amount;
            }
            return current;
        }) >= amount;
    }

    // --- Getters ---
    public String getBotId() { return botId; }
    public double getCapital() { return capital.get(); }
    public boolean isActive() { return isActive.get(); }
    public Instant getCreatedAt() { return createdAt; }
    public PriceEngine getPriceEngine() { return priceEngine; }

    /**
     * أنواع الصفقات
     */
    public enum TradeType {
        BUY, SELL
    }

    /**
     * نتيجة البوت
     */
    public static final class BotResult {
        private final boolean success;
        private final String message;

        private BotResult(boolean success, String message) {
            this.success = success;
            this.message = message;
        }

        public static BotResult success(String message) {
            return new BotResult(true, message);
        }

        public static BotResult failure(String message) {
            return new BotResult(false, message);
        }

        public boolean isSuccess() { return success; }
        public String getMessage() { return message; }
    }

    /**
     * إيقاف البوت (للاختبارات)
     */
    public void shutdown() {
        stop();
        System.out.println("TRADING BOT: Shutdown completed - ID: " + botId);
    }
}