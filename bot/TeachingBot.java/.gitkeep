package mazdady.bot;

import mazdady.trading.PriceEngine;
import mazdady.user.User;
import mazdady.user.UserManager;

import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ThreadLocalRandom;
import java.util.concurrent.TimeUnit;

/**
 * بوت تعليمي مع دعم التفاعل الذكي
 * يتبع نمط Observer لإعلام المستخدم بالنصائح
 */
public final class TeachingBot extends TradingBot {
    private final ScheduledExecutorService teachingScheduler = Executors.newSingleThreadScheduledExecutor();
    private final PriceEngine priceEngine;

    public TeachingBot(String botId, PriceEngine priceEngine) {
        super(botId, priceEngine);
        this.priceEngine = priceEngine;
        setCapital(1000.0); // رأس مال تعليمي
    }

    @Override
    public void start() {
        if (isActive.compareAndSet(false, true)) {
            teachingScheduler.scheduleAtFixedRate(
                this::provideEducationalInsights,
                0,
                60,
                TimeUnit.SECONDS
            );
            
            System.out.println("TEACHING BOT: Started - ID: " + getBotId());
        }
    }

    @Override
    public void stop() {
        if (isActive.compareAndSet(true, false)) {
            teachingScheduler.shutdown();
            System.out.println("TEACHING BOT: Stopped - ID: " + getBotId());
        }
    }

    /**
     * تقديم رؤى تعليمية تلقائية
     */
    private void provideEducationalInsights() {
        if (!isActive.get()) return;
        
        try {
            User user = UserManager.getInstance(null).getCurrentUser();
            double currentPrice = priceEngine.getCurrentPrice();
            double trend = priceEngine.getMarketTrend();
            double volatility = priceEngine.getVolatility();
            
            String insight = generateEducationalInsight(user, currentPrice, trend, volatility);
            if (insight != null && !insight.isEmpty()) {
                notifyUserInsight(user.getUserId(), insight);
            }
            
        } catch (Exception e) {
            System.err.println("TEACHING BOT ERROR: " + e.getMessage());
        }
    }

    private String generateEducationalInsight(User user, double price, double trend, double volatility) {
        // توليد نصائح تعليمية بناءً على مستوى المستخدم
        if (user.getLevel() <= 2) {
            // مستخدم مبتدئ
            if (trend > 0.5) {
                return "💡 نصيحة تعليمية: السوق صاعد! جرب شراء كمية صغيرة الآن.";
            } else if (trend < -0.5) {
                return "💡 نصيحة تعليمية: السوق هابط! انتظر حتى يرتد.";
            } else {
                return "💡 نصيحة تعليمية: السوق مستقر! راقب التغيرات.";
            }
        } else if (user.getLevel() <= 5) {
            // مستخدم متوسط
            return "📊 تحليل السوق: التقلب " + String.format("%.1f", volatility * 100) + 
                   "% | الاتجاه " + (trend > 0 ? "صاعد" : "هابط") + 
                   " | السعر " + String.format("%.2f", price);
        } else {
            // مستخدم متقدم
            double support = price * 0.95;
            double resistance = price * 1.05;
            return "🔮 تحليل متقدم: الدعم = " + String.format("%.2f", support) + 
                   ", المقاومة = " + String.format("%.2f", resistance) + 
                   ", التقلب = " + String.format("%.1f", volatility * 100) + "%";
        }
    }

    private void notifyUserInsight(String userId, String insight) {
        // في الإنتاج: إرسال إشعار للمستخدم
        System.out.println("TEACHING BOT: Insight for " + userId + " - " + insight);
    }

    /**
     * تنفيذ صفقة تجارية
     */
    @Override
    public void executeTrade(TradeType tradeType, double amount) {
        if (!isActive.get() || amount <= 0) return;
        
        try {
            User user = UserManager.getInstance(null).getCurrentUser();
            double userBalance = user.getBalance();
            
            if (userBalance < amount) {
                notifyUserInsight(user.getUserId(), "⚠️ رصيدك غير كافٍ لتنفيذ هذه الصفقة.");
                return;
            }
            
            if (tradeType == TradeType.BUY) {
                priceEngine.executeBuyOrder(getBotId(), amount);
                user.setBalance(userBalance - amount);
                notifyUserInsight(user.getUserId(), "✅ تم تنفيذ صفقة شراء بقيمة " + amount + " MAZDADY");
            } else if (tradeType == TradeType.SELL) {
                priceEngine.executeSellOrder(getBotId(), amount);
                user.setBalance(userBalance + amount);
                notifyUserInsight(user.getUserId(), "✅ تم تنفيذ صفقة بيع بقيمة " + amount + " MAZDADY");
            }
            
        } catch (Exception e) {
            System.err.println("TEACHING BOT TRADE ERROR: " + e.getMessage());
        }
    }

    /**
     * الحصول على حالة البوت التعليمي
     */
    public TeachingStatus getTeachingStatus() {
        User user = UserManager.getInstance(null).getCurrentUser();
        return new TeachingStatus(
            user.getLevel(),
            user.getBalance(),
            priceEngine.getCurrentPrice(),
            isActive.get()
        );
    }

    /**
     * حالة البوت التعليمي
     */
    public static final class TeachingStatus {
        private final int userLevel;
        private final double userBalance;
        private final double currentPrice;
        private final boolean active;

        public TeachingStatus(int userLevel, double userBalance, double currentPrice, boolean active) {
            this.userLevel = userLevel;
            this.userBalance = userBalance;
            this.currentPrice = currentPrice;
            this.active = active;
        }

        // Getters
        public int getUserLevel() { return userLevel; }
        public double getUserBalance() { return userBalance; }
        public double getCurrentPrice() { return currentPrice; }
        public boolean isActive() { return active; }
        
        public String getFormattedStatus() {
            return "User Level: " + userLevel + " - " +
                   "Balance: " + String.format("%.2f", userBalance) + " MAZDADY - " +
                   "Price: " + String.format("%.4f", currentPrice) + " MAZDADY - " +
                   "Status: " + (active ? "ACTIVE" : "INACTIVE");
        }
    }

    // --- Getters ---
    public PriceEngine getPriceEngine() { return priceEngine; }
    public boolean isTeachingActive() { return isActive.get(); }
    
    /**
     * إيقاف البوت التعليمي (للاختبارات)
     */
    public void shutdown() {
        stop();
        System.out.println("TEACHING BOT: Shutdown completed - ID: " + getBotId());
    }
}