package mazdady.emergency;

import mazdady.user.User;
import mazdady.user.UserManager;
import mazdady.wallet.WalletManager;
import mazdady.admin.AdminConfig;
import mazdady.security.SecurityMonitor;

import java.time.Instant;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;

/**
 * مدير الأمان التلقائي مع دعم الاسترداد
 * يتبع نمط Facade لتوفير واجهة موحدة
 */
public final class FailSafeMgr {
    private final WalletManager walletManager;
    private final SecurityMonitor securityMonitor;
    private final ScheduledExecutorService failSafeScheduler = Executors.newScheduledThreadPool(1);
    private final Map<String, Consumer<FailSafeEvent>> failSafeListeners = new ConcurrentHashMap<>();
    private volatile boolean failSafeModeActive = false;
    private static FailSafeMgr instance;

    private FailSafeMgr(WalletManager walletManager, SecurityMonitor securityMonitor) {
        this.walletManager = walletManager;
        this.securityMonitor = securityMonitor;
        startFailSafeMonitoring();
    }

    public static synchronized FailSafeMgr getInstance(WalletManager walletManager, SecurityMonitor securityMonitor) {
        if (instance == null) {
            instance = new FailSafeMgr(walletManager, securityMonitor);
        }
        return instance;
    }

    private void startFailSafeMonitoring() {
        failSafeScheduler.scheduleAtFixedRate(
            this::checkFailSafeConditions,
            0,
            10,
            TimeUnit.SECONDS
        );
        
        System.out.println("FAIL SAFE MGR: Started monitoring every 10 seconds");
    }

    /**
     * التحقق من شروط الأمان التلقائي غير متزامن
     */
    private void checkFailSafeConditions() {
        try {
            if (failSafeModeActive) return;
            
            // التحقق من شروط الأمان
            if (shouldActivateFailSafe()) {
                activateFailSafe();
            }
            
        } catch (Exception e) {
            System.err.println("FAIL SAFE MONITORING ERROR: " + e.getMessage());
        }
    }

    private boolean shouldActivateFailSafe() {
        try {
            // التحقق من حالة المحفظة
            if (walletManager.getSystemTreasury() < 500.0) {
                return true;
            }
            
            // التحقق من عدد المستخدمين
            int userCount = UserManager.getInstance(null).getUserCount();
            if (userCount < 5) {
                return true;
            }
            
            // التحقق من حالة الأمان
            if (securityMonitor.isCompromised()) {
                return true;
            }
            
            return false;
            
        } catch (Exception e) {
            System.err.println("FAIL SAFE CONDITION CHECK ERROR: " + e.getMessage());
            return false;
        }
    }

    /**
     * تفعيل الأمان التلقائي غير متزامن
     */
    public CompletableFuture<FailSafeResult> activateFailSafeAsync() {
        return CompletableFuture.supplyAsync(() -> {
            try {
                activateFailSafe();
                return FailSafeResult.success("Fail safe activated successfully");
                
            } catch (Exception e) {
                return FailSafeResult.failure("Fail safe activation failed: " + e.getMessage());
            }
        });
    }

    /**
     * تفعيل الأمان التلقائي
     */
    public void activateFailSafe() {
        if (failSafeModeActive) {
            System.out.println("FAIL SAFE MGR: Fail safe already active");
            return;
        }
        
        failSafeModeActive = true;
        System.out.println("🛡️ FAIL SAFE MGR: Fail safe activated at " + Instant.now());
        
        // تنفيذ إجراءات الأمان
        executeFailSafeMeasures();
        
        // إنشاء نسخة احتياطية فورية
        createEmergencyBackup();
        
        // جدولة إيقاف الأمان التلقائي بعد 12 ساعة
        failSafeScheduler.schedule(
            this::deactivateFailSafe,
            12,
            TimeUnit.HOURS
        );
    }

    /**
     * تعطيل الأمان التلقائي غير متزامن
     */
    public CompletableFuture<FailSafeResult> deactivateFailSafeAsync() {
        return CompletableFuture.supplyAsync(() -> {
            try {
                deactivateFailSafe();
                return FailSafeResult.success("Fail safe deactivated successfully");
                
            } catch (Exception e) {
                return FailSafeResult.failure("Fail safe deactivation failed: " + e.getMessage());
            }
        });
    }

    /**
     * تعطيل الأمان التلقائي
     */
    public void deactivateFailSafe() {
        if (!failSafeModeActive) {
            System.out.println("FAIL SAFE MGR: Fail safe already inactive");
            return;
        }
        
        failSafeModeActive = false;
        System.out.println("✅ FAIL SAFE MGR: Fail safe deactivated at " + Instant.now());
        
        // تنفيذ إجراءات إنهاء الأمان
        executeFailSafeExitMeasures();
    }

    private void executeFailSafeMeasures() {
        try {
            // 1. تجميد جميع العمليات المالية
            walletManager.freezeAllOperations();
            
            // 2. تعطيل بوتات التداول
            mazdady.bot.BotManager.getInstance(mazdady.trading.PriceEngine.getInstance())
                .stopAllBotsAsync();
            
            // 3. تفعيل وضع القراءة فقط
            AdminConfig.getInstance().setReadOnlyMode(true);
            
            // 4. تسجيل الحدث في السجل الأمني
            securityMonitor.logSecurityEvent("FAIL_SAFE_ACTIVATED", 
                "Fail safe mode activated due to critical conditions");
            
            System.out.println("FAIL SAFE MGR: Fail safe measures executed");
            
        } catch (Exception e) {
            System.err.println("FAIL SAFE MEASURES ERROR: " + e.getMessage());
        }
    }

    private void executeFailSafeExitMeasures() {
        try {
            // 1. إلغاء تجميد العمليات المالية
            walletManager.unfreezeAllOperations();
            
            // 2. إعادة تفعيل بوتات التداول
            mazdady.bot.BotManager.getInstance(mazdady.trading.PriceEngine.getInstance())
                .startAllBots();
            
            // 3. إلغاء وضع القراءة فقط
            AdminConfig.getInstance().setReadOnlyMode(false);
            
            // 4. تسجيل الحدث في السجل الأمني
            securityMonitor.logSecurityEvent("FAIL_SAFE_DEACTIVATED", 
                "Fail safe mode deactivated - System stabilized");
            
            System.out.println("FAIL SAFE MGR: Fail safe exit measures executed");
            
        } catch (Exception e) {
            System.err.println("FAIL SAFE EXIT MEASURES ERROR: " + e.getMessage());
        }
    }

    private void createEmergencyBackup() {
        try {
            // 1. حفظ حالة المستخدمين
            String userBackup = UserManager.getInstance(null).exportUserData();
            securityMonitor.getSecureStorage().putString("emergency_user_backup", 
                securityMonitor.getSecureStorage().encrypt(userBackup));
            
            // 2. حفظ حالة المحفظة
            String walletBackup = walletManager.exportWalletData();
            securityMonitor.getSecureStorage().putString("emergency_wallet_backup", 
                securityMonitor.getSecureStorage().encrypt(walletBackup));
            
            // 3. حفظ حالة الإعدادات
            String configBackup = AdminConfig.getInstance().exportConfig();
            securityMonitor.getSecureStorage().putString("emergency_config_backup", 
                securityMonitor.getSecureStorage().encrypt(configBackup));
            
            System.out.println("FAIL SAFE MGR: Emergency backup created");
            
        } catch (Exception e) {
            System.err.println("EMERGENCY BACKUP ERROR: " + e.getMessage());
        }
    }

    /**
     * استرداد النظام من النسخة الاحتياطية غير متزامن
     */
    public CompletableFuture<RecoveryResult> recoverFromBackupAsync() {
        return CompletableFuture.supplyAsync(() -> {
            try {
                // 1. استرداد حالة المستخدمين
                String userBackup = securityMonitor.getSecureStorage().getString("emergency_user_backup", null);
                if (userBackup != null) {
                    String decryptedUserBackup = securityMonitor.getSecureStorage().decrypt(userBackup);
                    UserManager.getInstance(null).importUserData(decryptedUserBackup);
                }
                
                // 2. استرداد حالة المحفظة
                String walletBackup = securityMonitor.getSecureStorage().getString("emergency_wallet_backup", null);
                if (walletBackup != null) {
                    String decryptedWalletBackup = securityMonitor.getSecureStorage().decrypt(walletBackup);
                    walletManager.importWalletData(decryptedWalletBackup);
                }
                
                // 3. استرداد حالة الإعدادات
                String configBackup = securityMonitor.getSecureStorage().getString("emergency_config_backup", null);
                if (configBackup != null) {
                    String decryptedConfigBackup = securityMonitor.getSecureStorage().decrypt(configBackup);
                    AdminConfig.getInstance().importConfig(decryptedConfigBackup);
                }
                
                System.out.println("FAIL SAFE MGR: System recovered from emergency backup");
                return RecoveryResult.success("System recovered successfully from backup");
                
            } catch (Exception e) {
                return RecoveryResult.failure("Recovery from backup failed: " + e.getMessage());
            }
        });
    }

    /**
     * إضافة مستمع للأمان التلقائي
     */
    public void addFailSafeListener(String listenerId, Consumer<FailSafeEvent> listener) {
        if (listenerId != null && listener != null) {
            failSafeListeners.put(listenerId, listener);
            System.out.println("FAIL SAFE MGR: Added fail safe listener - " + listenerId);
        }
    }

    /**
     * إزالة مستمع للأمان التلقائي
     */
    public void removeFailSafeListener(String listenerId) {
        failSafeListeners.remove(listenerId);
        System.out.println("FAIL SAFE MGR: Removed fail safe listener - " + listenerId);
    }

    private void notifyFailSafeListeners(FailSafeEvent event) {
        failSafeListeners.values().forEach(listener -> {
            try {
                listener.accept(event);
            } catch (Exception e) {
                // تجاهل أخطاء المستمعين
            }
        });
    }

    /**
     * تحديث إعدادات الأمان التلقائي من الإعدادات الإدارية
     */
    public void updateFailSafeConfig(AdminConfig.FailSafeConfig config) {
        if (config != null) {
            System.out.println("FAIL SAFE MGR: Updated fail safe config from admin");
        }
    }

    /**
     * إيقاف المدير (للاختبارات)
     */
    public void shutdown() {
        failSafeScheduler.shutdown();
        failSafeListeners.clear();
        System.out.println("FAIL SAFE MGR: Shutdown completed");
    }

    /**
     * إعادة تعيين المدير (للاختبارات)
     */
    public void reset() {
        failSafeModeActive = false;
        failSafeListeners.clear();
        System.out.println("FAIL SAFE MGR: Reset completed");
    }

    /**
     * حدث الأمان التلقائي
     */
    public static final class FailSafeEvent {
        private final FailSafeEventType type;
        private final String message;
        private final Instant timestamp;

        public FailSafeEvent(FailSafeEventType type, String message, Instant timestamp) {
            this.type = type;
            this.message = message;
            this.timestamp = timestamp;
        }

        public enum FailSafeEventType {
            ACTIVATED, DEACTIVATED, BACKUP_CREATED, RECOVERY_COMPLETED, SYSTEM_STABILIZED
        }

        // Getters
        public FailSafeEventType getType() { return type; }
        public String getMessage() { return message; }
        public Instant getTimestamp() { return timestamp; }
        
        @Override
        public String toString() {
            return "FailSafeEvent{" +
                "type=" + type +
                ", message='" + message + '\'' +
                ", timestamp=" + timestamp +
                '}';
        }
    }

    /**
     * نتيجة الأمان التلقائي
     */
    public static final class FailSafeResult {
        private final boolean success;
        private final String message;

        private FailSafeResult(boolean success, String message) {
            this.success = success;
            this.message = message;
        }

        public static FailSafeResult success(String message) {
            return new FailSafeResult(true, message);
        }

        public static FailSafeResult failure(String message) {
            return new FailSafeResult(false, message);
        }

        public boolean isSuccess() { return success; }
        public String getMessage() { return message; }
    }

    /**
     * نتيجة الاسترداد
     */
    public static final class RecoveryResult {
        private final boolean success;
        private final String message;

        private RecoveryResult(boolean success, String message) {
            this.success = success;
            this.message = message;
        }

        public static RecoveryResult success(String message) {
            return new RecoveryResult(true, message);
        }

        public static RecoveryResult failure(String message) {
            return new RecoveryResult(false, message);
        }

        public boolean isSuccess() { return success; }
        public String getMessage() { return message; }
    }

    // --- Getters ---
    public boolean isFailSafeModeActive() { return failSafeModeActive; }
    public int getFailSafeListenerCount() { return failSafeListeners.size(); }
    public boolean hasFailSafeListeners() { return !failSafeListeners.isEmpty(); }
    public Map<String, Consumer<FailSafeEvent>> getFailSafeListeners() { 
        return new ConcurrentHashMap<>(failSafeListeners); 
    }
}