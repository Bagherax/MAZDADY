package mazdady.emergency;

import mazdady.user.User;
import mazdady.user.UserManager;
import mazdady.wallet.WalletManager;
import mazdady.admin.AdminConfig;
import mazdady.security.SecurityMonitor;

import java.time.Instant;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;

/**
 * مدير الطوارئ مع دعم الاستجابة الفورية
 * يتبع نمط Facade لتوفير واجهة موحدة
 */
public final class EmergencyMgr {
    private final WalletManager walletManager;
    private final SecurityMonitor securityMonitor;
    private final ScheduledExecutorService emergencyScheduler = Executors.newScheduledThreadPool(1);
    private final Map<String, Consumer<EmergencyEvent>> emergencyListeners = new ConcurrentHashMap<>();
    private volatile boolean emergencyModeActive = false;
    private static EmergencyMgr instance;

    private EmergencyMgr(WalletManager walletManager, SecurityMonitor securityMonitor) {
        this.walletManager = walletManager;
        this.securityMonitor = securityMonitor;
        startEmergencyMonitoring();
    }

    public static synchronized EmergencyMgr getInstance(WalletManager walletManager, SecurityMonitor securityMonitor) {
        if (instance == null) {
            instance = new EmergencyMgr(walletManager, securityMonitor);
        }
        return instance;
    }

    private void startEmergencyMonitoring() {
        emergencyScheduler.scheduleAtFixedRate(
            this::checkForEmergencies,
            0,
            30,
            TimeUnit.SECONDS
        );
        
        System.out.println("EMERGENCY MGR: Started monitoring every 30 seconds");
    }

    /**
     * التحقق من وجود أزمات غير متزامن
     */
    private void checkForEmergencies() {
        try {
            if (emergencyModeActive) return;
            
            // التحقق من حالة المحفظة
            checkWalletEmergency();
            
            // التحقق من حالة الأمان
            checkSecurityEmergency();
            
            // التحقق من حالة النظام
            checkSystemEmergency();
            
        } catch (Exception e) {
            System.err.println("EMERGENCY CHECK ERROR: " + e.getMessage());
        }
    }

    private void checkWalletEmergency() {
        try {
            double systemTreasury = walletManager.getSystemTreasury();
            double totalUserBalance = UserManager.getInstance(null).getAllUsers().stream()
                .mapToDouble(User::getBalance)
                .sum();
            
            // إذا كان الخزان أقل من 10% من رصيد المستخدمين
            if (systemTreasury < totalUserBalance * 0.1) {
                triggerEmergency(EmergencyType.WALLET_CRISIS, "System treasury below 10% of user balances");
            }
            
        } catch (Exception e) {
            System.err.println("WALLET EMERGENCY CHECK ERROR: " + e.getMessage());
        }
    }

    private void checkSecurityEmergency() {
        try {
            // التحقق من عدد المحاولات الفاشلة
            int failedAttempts = securityMonitor.getFailedLoginAttempts();
            if (failedAttempts > 100) {
                triggerEmergency(EmergencyType.SECURITY_CRISIS, "High number of failed login attempts detected");
            }
            
            // التحقق من الأجهزة المخترقة
            int compromisedDevices = securityMonitor.getCompromisedDevicesCount();
            if (compromisedDevices > 10) {
                triggerEmergency(EmergencyType.SECURITY_CRISIS, "Multiple compromised devices detected");
            }
            
        } catch (Exception e) {
            System.err.println("SECURITY EMERGENCY CHECK ERROR: " + e.getMessage());
        }
    }

    private void checkSystemEmergency() {
        try {
            // التحقق من أداء النظام
            double cpuUsage = getSystemCPUUsage();
            double memoryUsage = getSystemMemoryUsage();
            
            if (cpuUsage > 90.0 || memoryUsage > 95.0) {
                triggerEmergency(EmergencyType.SYSTEM_CRISIS, 
                    "High system resource usage - CPU: " + String.format("%.1f", cpuUsage) + 
                    "%, Memory: " + String.format("%.1f", memoryUsage) + "%");
            }
            
        } catch (Exception e) {
            System.err.println("SYSTEM EMERGENCY CHECK ERROR: " + e.getMessage());
        }
    }

    /**
     * تفعيل أزمة غير متزامن
     */
    public CompletableFuture<EmergencyResult> triggerEmergencyAsync(EmergencyType emergencyType, String reason) {
        return CompletableFuture.supplyAsync(() -> {
            try {
                triggerEmergency(emergencyType, reason);
                return EmergencyResult.success("Emergency triggered successfully");
                
            } catch (Exception e) {
                return EmergencyResult.failure("Emergency trigger failed: " + e.getMessage());
            }
        });
    }

    private void triggerEmergency(EmergencyType emergencyType, String reason) {
        System.out.println("🚨 EMERGENCY MGR: Emergency triggered - " + emergencyType + " - " + reason);
        
        EmergencyEvent event = new EmergencyEvent(emergencyType, reason, Instant.now());
        notifyEmergencyListeners(event);
        
        // تسجيل الأزمة في السجل الأمني
        securityMonitor.reportEmergency(emergencyType.name(), reason);
        
        // تطبيق إجراءات الطوارئ
        applyEmergencyMeasures(emergencyType, reason);
    }

    private void applyEmergencyMeasures(EmergencyType emergencyType, String reason) {
        switch (emergencyType) {
            case WALLET_CRISIS:
                handleWalletCrisis(reason);
                break;
            case SECURITY_CRISIS:
                handleSecurityCrisis(reason);
                break;
            case SYSTEM_CRISIS:
                handleSystemCrisis(reason);
                break;
            case FINANCIAL_CRISIS:
                handleFinancialCrisis(reason);
                break;
        }
    }

    private void handleWalletCrisis(String reason) {
        System.out.println("WALLET CRISIS: Applying protective measures...");
        
        // تجميد السحوبات مؤقتًا
        walletManager.freezeWithdrawals(60); // تجميد لمدة ساعة
        
        // تفعيل بوت الطوارئ
        FailSafeMgr.getInstance(walletManager, securityMonitor).activateEmergencyMode();
        
        // إرسال تنبيه للادمن
        AdminConfig.getInstance().notifyAdmins("WALLET_CRISIS", reason);
    }

    private void handleSecurityCrisis(String reason) {
        System.out.println("SECURITY CRISIS: Activating security protocols...");
        
        // تفعيل وضع الأمان العالي
        securityMonitor.activateHighSecurityMode();
        
        // تسجيل خروج جميع المستخدمين
        UserManager.getInstance(null).logoutAllUsers();
        
        // إرسال تنبيه للادمن
        AdminConfig.getInstance().notifyAdmins("SECURITY_CRISIS", reason);
    }

    private void handleSystemCrisis(String reason) {
        System.out.println("SYSTEM CRISIS: Optimizing system resources...");
        
        // تقليل عدد العمليات الخلفية
        reduceBackgroundProcesses();
        
        // تفعيل وضع الأداء العالي
        activateHighPerformanceMode();
        
        // إرسال تنبيه للادمن
        AdminConfig.getInstance().notifyAdmins("SYSTEM_CRISIS", reason);
    }

    private void handleFinancialCrisis(String reason) {
        System.out.println("FINANCIAL CRISIS: Stabilizing financial system...");
        
        // تفعيل بوت تثبيت السوق
        mazdady.bot.MarketStabilizerBot stabilizerBot = 
            new mazdady.bot.MarketStabilizerBot("STAB_BOT_" + System.currentTimeMillis(), 
                                              mazdady.trading.PriceEngine.getInstance());
        stabilizerBot.start();
        
        // إرسال تنبيه للادمن
        AdminConfig.getInstance().notifyAdmins("FINANCIAL_CRISIS", reason);
    }

    private void reduceBackgroundProcesses() {
        // في الإنتاج: تقليل العمليات الخلفية
        System.out.println("EMERGENCY MGR: Reduced background processes");
    }

    private void activateHighPerformanceMode() {
        // في الإنتاج: تفعيل وضع الأداء العالي
        System.out.println("EMERGENCY MGR: Activated high performance mode");
    }

    private double getSystemCPUUsage() {
        // في الإنتاج: الحصول من SystemInfo
        return ThreadLocalRandom.current().nextDouble(0, 100);
    }

    private double getSystemMemoryUsage() {
        // في الإنتاج: الحصول من Runtime
        Runtime runtime = Runtime.getRuntime();
        long maxMemory = runtime.maxMemory();
        long totalMemory = runtime.totalMemory();
        long freeMemory = runtime.freeMemory();
        long usedMemory = totalMemory - freeMemory;
        return (double) usedMemory / maxMemory * 100;
    }

    private void notifyEmergencyListeners(EmergencyEvent event) {
        emergencyListeners.values().forEach(listener -> {
            try {
                listener.accept(event);
            } catch (Exception e) {
                // تجاهل أخطاء المستمعين
            }
        });
    }

    /**
     * إضافة مستمع للأزمات
     */
    public void addEmergencyListener(String listenerId, Consumer<EmergencyEvent> listener) {
        if (listenerId != null && listener != null) {
            emergencyListeners.put(listenerId, listener);
            System.out.println("EMERGENCY MGR: Added emergency listener - " + listenerId);
        }
    }

    /**
     * إزالة مستمع للأزمات
     */
    public void removeEmergencyListener(String listenerId) {
        emergencyListeners.remove(listenerId);
        System.out.println("EMERGENCY MGR: Removed emergency listener - " + listenerId);
    }

    /**
     * تحديث إعدادات الطوارئ من الإعدادات الإدارية
     */
    public void updateEmergencyConfig(AdminConfig.EmergencyConfig config) {
        if (config != null) {
            System.out.println("EMERGENCY MGR: Updated emergency config from admin");
        }
    }

    /**
     * إيقاف المدير (للاختبارات)
     */
    public void shutdown() {
        emergencyScheduler.shutdown();
        emergencyListeners.clear();
        System.out.println("EMERGENCY MGR: Shutdown completed");
    }

    /**
     * إعادة تعيين المدير (للاختبارات)
     */
    public void reset() {
        emergencyModeActive = false;
        emergencyListeners.clear();
        System.out.println("EMERGENCY MGR: Reset completed");
    }

    /**
     * حدث الأزمة
     */
    public static final class EmergencyEvent {
        private final EmergencyType type;
        private final String reason;
        private final Instant timestamp;

        public EmergencyEvent(EmergencyType type, String reason, Instant timestamp) {
            this.type = type;
            this.reason = reason;
            this.timestamp = timestamp;
        }

        public enum EmergencyType {
            WALLET_CRISIS, SECURITY_CRISIS, SYSTEM_CRISIS, FINANCIAL_CRISIS
        }

        // Getters
        public EmergencyType getType() { return type; }
        public String getReason() { return reason; }
        public Instant getTimestamp() { return timestamp; }
        
        @Override
        public String toString() {
            return "EmergencyEvent{" +
                "type=" + type +
                ", reason='" + reason + '\'' +
                ", timestamp=" + timestamp +
                '}';
        }
    }

    /**
     * نتيجة الأزمة
     */
    public static final class EmergencyResult {
        private final boolean success;
        private final String message;

        private EmergencyResult(boolean success, String message) {
            this.success = success;
            this.message = message;
        }

        public static EmergencyResult success(String message) {
            return new EmergencyResult(true, message);
        }

        public static EmergencyResult failure(String message) {
            return new EmergencyResult(false, message);
        }

        public boolean isSuccess() { return success; }
        public String getMessage() { return message; }
    }

    // --- Getters ---
    public boolean isEmergencyModeActive() { return emergencyModeActive; }
    public int getEmergencyListenerCount() { return emergencyListeners.size(); }
    public boolean hasEmergencyListeners() { return !emergencyListeners.isEmpty(); }
    public Map<String, Consumer<EmergencyEvent>> getEmergencyListeners() { 
        return new ConcurrentHashMap<>(emergencyListeners); 
    }
}