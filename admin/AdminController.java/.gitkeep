package mazdady.admin;

import mazdady.user.UserManager;
import mazdady.trading.PriceEngine;
import mazdady.security.SecurityMonitor;
import mazdady.bot.BotController;

import java.util.concurrent.CompletableFuture;
import java.util.function.Consumer;

/**
 * وحدة التحكم الإدارية مع دعم الأوامر المتقدمة
 * يتبع نمط Command لفصل الأوامر عن التنفيذ
 */
public final class AdminController {
    private final AdminConfig adminConfig;
    private final PriceEngine priceEngine;
    private final SecurityMonitor securityMonitor;
    private final BotController botController;
    private final PriceManipulationPanel priceManipulationPanel;
    private static AdminController instance;

    private AdminController(
        AdminConfig adminConfig,
        PriceEngine priceEngine,
        SecurityMonitor securityMonitor,
        BotController botController
    ) {
        this.adminConfig = adminConfig;
        this.priceEngine = priceEngine;
        this.securityMonitor = securityMonitor;
        this.botController = botController;
        this.priceManipulationPanel = PriceManipulationPanel.getInstance(priceEngine, securityMonitor);
    }

    public static synchronized AdminController getInstance(
        AdminConfig adminConfig,
        PriceEngine priceEngine,
        SecurityMonitor securityMonitor,
        BotController botController
    ) {
        if (instance == null) {
            instance = new AdminController(adminConfig, priceEngine, securityMonitor, botController);
        }
        return instance;
    }

    /**
     * تنفيذ أمر إداري غير متزامن
     */
    public CompletableFuture<AdminResult> executeAdminCommandAsync(AdminCommand command) {
        return CompletableFuture.supplyAsync(() -> {
            try {
                // التحقق من صلاحيات الادمن
                if (!isAdminAuthorized(command.getAdminId())) {
                    return AdminResult.failure("Unauthorized admin access");
                }
                
                // تنفيذ الأمر
                AdminResult result = command.execute();
                
                // تسجيل الأمر في سجل الأمان
                securityMonitor.logAdminAction(
                    command.getAdminId(),
                    command.getCommandType(),
                    command.getParameters().toString(),
                    result.isSuccess()
                );
                
                System.out.println("ADMIN CONTROLLER: Executed command " + command.getCommandType() + 
                                 " - Result: " + result.getMessage());
                
                return result;
                
            } catch (Exception e) {
                return AdminResult.failure("Admin command execution failed: " + e.getMessage());
            }
        });
    }

    /**
     * تنفيذ أمر تلاعب بالسعر غير متزامن
     */
    public CompletableFuture<AdminResult> executePriceManipulationCommandAsync(
        String adminId,
        PriceManipulationCommand command
    ) {
        return CompletableFuture.supplyAsync(() -> {
            try {
                // التحقق من صلاحيات الادمن
                if (!isAdminAuthorized(adminId)) {
                    return AdminResult.failure("Unauthorized admin access");
                }
                
                // تنفيذ الأمر
                AdminResult result = command.execute(priceManipulationPanel);
                
                // تسجيل الأمر في سجل الأمان
                securityMonitor.logAdminAction(
                    adminId,
                    "PRICE_MANIPULATION",
                    command.getCommandType(),
                    result.isSuccess()
                );
                
                System.out.println("ADMIN CONTROLLER: Executed price manipulation command " + 
                                 command.getCommandType() + " - Result: " + result.getMessage());
                
                return result;
                
            } catch (Exception e) {
                return AdminResult.failure("Price manipulation command failed: " + e.getMessage());
            }
        });
    }

    private boolean isAdminAuthorized(String adminId) {
        // في الإنتاج: التحقق من صلاحيات الادمن من قاعدة البيانات
        return adminId != null && (adminId.startsWith("admin_") || "BAGHERAX".equals(adminId));
    }

    /**
     * أمر إداري
     */
    @FunctionalInterface
    public interface AdminCommand {
        String getAdminId();
        String getCommandType();
        Object getParameters();
        AdminResult execute();
    }

    /**
     * أمر تلاعب بالسعر
     */
    @FunctionalInterface
    public interface PriceManipulationCommand {
        String getCommandType();
        Object getParameters();
        AdminResult execute(PriceManipulationPanel panel);
    }

    /**
     * نتيجة الأمر الإداري
     */
    public static final class AdminResult {
        private final boolean success;
        private final String message;

        private AdminResult(boolean success, String message) {
            this.success = success;
            this.message = message;
        }

        public static AdminResult success(String message) {
            return new AdminResult(true, message);
        }

        public static AdminResult failure(String message) {
            return new AdminResult(false, message);
        }

        public boolean isSuccess() { return success; }
        public String getMessage() { return message; }
    }

    /**
     * أوامر التلاعب بالسعر
     */
    public static final class PriceCommands {
        public static PriceManipulationCommand setFixedPrice(double price) {
            return new PriceManipulationCommand() {
                @Override public String getCommandType() { return "SET_FIXED_PRICE"; }
                @Override public Object getParameters() { return price; }
                @Override public AdminResult execute(PriceManipulationPanel panel) {
                    return panel.setFixedPriceAsync(price).join();
                }
            };
        }

        public static PriceManipulationCommand applyMultiplier(double multiplier) {
            return new PriceManipulationCommand() {
                @Override public String getCommandType() { return "APPLY_MULTIPLIER"; }
                @Override public Object getParameters() { return multiplier; }
                @Override public AdminResult execute(PriceManipulationPanel panel) {
                    return panel.applyPriceMultiplierAsync(multiplier).join();
                }
            };
        }

        public static PriceManipulationCommand resetToMarket() {
            return new PriceManipulationCommand() {
                @Override public String getCommandType() { return "RESET_TO_MARKET"; }
                @Override public Object getParameters() { return null; }
                @Override public AdminResult execute(PriceManipulationPanel panel) {
                    return panel.resetToMarketPriceAsync().join();
                }
            };
        }

        public static PriceManipulationCommand applyFluctuation(double amplitude, long duration) {
            return new PriceManipulationCommand() {
                @Override public String getCommandType() { return "APPLY_FLUCTUATION"; }
                @Override public Object getParameters() { return new double[]{amplitude, duration}; }
                @Override public AdminResult execute(PriceManipulationPanel panel) {
                    return panel.applyPriceFluctuationAsync(amplitude, duration).join();
                }
            };
        }
    }
}