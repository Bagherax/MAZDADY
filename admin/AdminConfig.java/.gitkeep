package mazdady.admin;

import org.json.JSONObject;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;

public class AdminConfig {
    private static AdminConfig instance;
    private int minWithdrawalLevel = 5;
    private double[] weeklyLimits = {0, 10, 30, 60, 100, 200, 500, 1000};
    private String withdrawalSchedule = "weekly";
    private boolean isInitialized = false;
    private UIConfig uiConfig;

    private AdminConfig() {}

    public static synchronized AdminConfig getInstance() {
        if (instance == null) {
            instance = new AdminConfig();
        }
        return instance;
    }

    public void loadFromServer() {
        if (isInitialized) return;

        try {
            String configUrl = "https://raw.githubusercontent.com/BAGHERAX/MAZDADY/main/server/config.json";
            HttpURLConnection conn = (HttpURLConnection) new URL(configUrl).openConnection();
            conn.setRequestMethod("GET");
            conn.setConnectTimeout(5000);
            conn.setReadTimeout(5000);

            BufferedReader reader = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            StringBuilder response = new StringBuilder();
            String line;
            while ((line = reader.readLine()) != null) {
                response.append(line);
            }
            reader.close();

            JSONObject json = new JSONObject(response.toString());
            minWithdrawalLevel = json.getInt("min_withdrawal_level");
            withdrawalSchedule = json.getString("withdrawal_schedule");
            
            if (json.has("ui")) {
                uiConfig = new UIConfig(json.getJSONObject("ui"));
            } else {
                uiConfig = new UIConfig(new JSONObject());
            }

            isInitialized = true;
        } catch (Exception e) {
            isInitialized = true;
            uiConfig = new UIConfig(new JSONObject());
        }
    }

    public int getMinWithdrawalLevel() { return minWithdrawalLevel; }
    public double getWeeklyLimitForLevel(int level) {
        if (level < weeklyLimits.length) return weeklyLimits[level];
        return weeklyLimits[weeklyLimits.length - 1];
    }
    public boolean isTodayWithdrawalDay() { return true; }
    public String getNextWithdrawalDate() { return "الاثنين القادم"; }
    public UIConfig getUIConfig() { return uiConfig; }

    public static class UIConfig {
        private String popupBackgroundColor = "#1a1a2e";
        private String popupTitleColor = "#4CAF50";
        private String popupContentColor = "#ffffff";
        private String popupButtonColor = "#FF5722";
        private float popupTitleSize = 18f;
        private float popupContentSize = 14f;
        private float popupButtonSize = 16f;
        private float popupWidthRatio = 0.9f;
        private float popupHeightRatio = 0.7f;

        public UIConfig(JSONObject json) {
            if (json.length() > 0) {
                popupBackgroundColor = json.optString("popup_bg", popupBackgroundColor);
                popupTitleColor = json.optString("popup_title_color", popupTitleColor);
                popupContentColor = json.optString("popup_content_color", popupContentColor);
                popupButtonColor = json.optString("popup_button_color", popupButtonColor);
                popupTitleSize = (float) json.optDouble("popup_title_size", popupTitleSize);
                popupContentSize = (float) json.optDouble("popup_content_size", popupContentSize);
                popupButtonSize = (float) json.optDouble("popup_button_size", popupButtonSize);
                popupWidthRatio = (float) json.optDouble("popup_width_ratio", popupWidthRatio);
                popupHeightRatio = (float) json.optDouble("popup_height_ratio", popupHeightRatio);
            }
        }

        public String getPopupBackgroundColor() { return popupBackgroundColor; }
        public String getPopupTitleColor() { return popupTitleColor; }
        public String getPopupContentColor() { return popupContentColor; }
        public String getPopupButtonColor() { return popupButtonColor; }
        public float getPopupTitleSize() { return popupTitleSize; }
        public float getPopupContentSize() { return popupContentSize; }
        public float getPopupButtonSize() { return popupButtonSize; }
        public float getPopupWidthRatio() { return popupWidthRatio; }
        public float getPopupHeightRatio() { return popupHeightRatio; }
    }
}
// داخل فئة UIConfig
public static class ButtonConfig {
    private String pressColor = "#45a049"; // لون عند الضغط
    private boolean glowEffectEnabled = true;
    private String iconUrl = ""; // رابط أيقونة شفافة

    public ButtonConfig(JSONObject json) {
        if (json.length() > 0) {
            pressColor = json.optString("press_color", pressColor);
            glowEffectEnabled = json.optBoolean("glow_effect", glowEffectEnabled);
            iconUrl = json.optString("icon_url", iconUrl);
        }
    }

    // Getters
    public String getPressColor() { return pressColor; }
    public boolean isGlowEffectEnabled() { return glowEffectEnabled; }
    public String getIconUrl() { return iconUrl; }
}

private Map<String, ButtonConfig> buttonConfigs = new HashMap<>();

public UIConfig(JSONObject json) {
    if (json.has("buttons")) {
        JSONObject buttons = json.getJSONObject("buttons");
        Iterator<String> keys = buttons.keys();
        while (keys.hasNext()) {
            String key = keys.next();
            buttonConfigs.put(key, new ButtonConfig(buttons.getJSONObject(key)));
        }
    }
    // تأكد من وجود إعدادات افتراضية
    if (!buttonConfigs.containsKey("default")) {
        buttonConfigs.put("default", new ButtonConfig(new JSONObject()));
    }
}

public ButtonConfig getButtonConfig(String buttonId) {
    return buttonConfigs.getOrDefault(buttonId, buttonConfigs.get("default"));
}
// داخل فئة UIConfig
private String splashVideoUrl = "";
private String splashFallbackImage = "";
private int splashDuration = 5000;

public UIConfig(JSONObject json) {
    if (json.has("ui")) {
        JSONObject ui = json.getJSONObject("ui");
        splashVideoUrl = ui.optString("splash_video_url", splashVideoUrl);
        splashFallbackImage = ui.optString("splash_fallback_image", splashFallbackImage);
        splashDuration = ui.optInt("splash_duration", splashDuration);
    }
}

public String getSplashVideoUrl() { return splashVideoUrl; }
public String getSplashFallbackImage() { return splashFallbackImage; }
public int getSplashDuration() { return splashDuration; }
}
{
  "ui": {
    "elements": {
      "buy_button": {
        "visible": true,
        "position": "bottom_left",
        "subscription_required": false,
        "min_level": 1
      },
      "sell_button": {
        "visible": true,
        "position": "bottom_right",
        "subscription_required": false,
        "min_level": 1
      },
      "ad_banner": {
        "visible": true,
        "position": "top_center",
        "subscription_required": false,
        "min_level": 1
      },
      "payment_tools": {
        "visible": false,
        "position": "sidebar",
        "subscription_required": true,
        "min_level": 3
      },
      "sign_popup": {
        "visible": true,
        "position": "center",
        "subscription_required": false,
        "min_level": 1
      }
      // داخل فئة UIConfig
public static class ElementConfig {
    private boolean visible = true;
    private String position = "center";
    private boolean subscriptionRequired = false;
    private int minLevel = 1;

    public ElementConfig(JSONObject json) {
        if (json.length() > 0) {
            visible = json.optBoolean("visible", visible);
            position = json.optString("position", position);
            subscriptionRequired = json.optBoolean("subscription_required", subscriptionRequired);
            minLevel = json.optInt("min_level", minLevel);
        }
    }

    // Getters
    public boolean isVisible() { return visible; }
    public String getPosition() { return position; }
    public boolean isSubscriptionRequired() { return subscriptionRequired; }
    public int getMinLevel() { return minLevel; }
}

private Map<String, ElementConfig> elementConfigs = new HashMap<>();

public UIConfig(JSONObject json) {
    if (json.has("ui") && json.getJSONObject("ui").has("elements")) {
        JSONObject elements = json.getJSONObject("ui").getJSONObject("elements");
        Iterator<String> keys = elements.keys();
        while (keys.hasNext()) {
            String key = keys.next();
            elementConfigs.put(key, new ElementConfig(elements.getJSONObject(key)));
        }
    }
}

public ElementConfig getElementConfig(String elementId) {
    return elementConfigs.get(elementId);
}
    }
  }
}