package mazdady.admin;

import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

/**
 * مدير طرق السحب مع دعم الإضافة الديناميكية
 */
public final class WithdrawalMethodManager {
    private final Map<String, String> withdrawalMethods = new ConcurrentHashMap<>();

    private static final WithdrawalMethodManager INSTANCE = new WithdrawalMethodManager();

    private WithdrawalMethodManager() {
        initializeDefaultMethods();
    }

    public static WithdrawalMethodManager getInstance() {
        return INSTANCE;
    }

    private void initializeDefaultMethods() {
        withdrawalMethods.put("wallet_crypto", "محفظة رقمية");
        withdrawalMethods.put("bank_transfer", "تحويل بنكي");
        withdrawalMethods.put("internal_transfer", "تحويل داخلي");
        withdrawalMethods.put("mobile_wallet", "محفظة جوال");
    }

    public void addWithdrawalMethod(String methodId, String displayName) {
        if (methodId == null || displayName == null || methodId.trim().isEmpty()) {
            throw new IllegalArgumentException("Method ID and display name cannot be null or empty");
        }
        withdrawalMethods.put(methodId, displayName);
        System.out.println("WITHDRAWAL METHOD ADDED: " + methodId + " (" + displayName + ")");
        ConfigPusher.getInstance().pushConfigUpdateAsync("withdrawal_methods", withdrawalMethods);
    }

    public void removeWithdrawalMethod(String methodId) {
        if (withdrawalMethods.remove(methodId) != null) {
            System.out.println("WITHDRAWAL METHOD REMOVED: " + methodId);
            ConfigPusher.getInstance().pushConfigUpdateAsync("withdrawal_methods", withdrawalMethods);
        }
    }

    public void updateWithdrawalMethod(String methodId, String newDisplayName) {
        if (withdrawalMethods.containsKey(methodId)) {
            withdrawalMethods.put(methodId, newDisplayName);
            System.out.println("WITHDRAWAL METHOD UPDATED: " + methodId + " → " + newDisplayName);
            ConfigPusher.getInstance().pushConfigUpdateAsync("withdrawal_methods", withdrawalMethods);
        }
    }

    public Map<String, String> getWithdrawalMethods() {
        return new ConcurrentHashMap<>(withdrawalMethods);
    }
}