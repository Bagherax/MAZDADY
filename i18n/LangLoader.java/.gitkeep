package mazdady.i18n;

import android.content.Context;

import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.CompletableFuture;

/**
 * محمل اللغات مع دعم التخزين المؤقت
 * يتبع نمط Singleton مع إدارة ذكية للذاكرة
 */
public final class LangLoader {
    private final Map<String, CompletableFuture<DynamicLang.LanguagePack>> loadingTasks = new ConcurrentHashMap<>();
    private final Context context;
    private static LangLoader instance;

    private LangLoader(Context context) {
        this.context = context.getApplicationContext();
    }

    public static synchronized LangLoader getInstance(Context context) {
        if (instance == null) {
            instance = new LangLoader(context);
        }
        return instance;
    }

    /**
     * تحميل لغة مع إدارة المهام المتزامنة
     */
    public CompletableFuture<DynamicLang.LanguagePack> loadLanguage(String languageCode) {
        return loadingTasks.computeIfAbsent(languageCode, lang -> {
            CompletableFuture<DynamicLang.LanguagePack> future = 
                DynamicLang.getInstance(context).loadLanguageAsync(lang);
            
            // إزالة المهمة بعد الانتهاء
            future.whenComplete((result, throwable) -> loadingTasks.remove(lang));
            
            return future;
        });
    }

    /**
     * التحقق من وجود لغة محملة
     */
    public boolean isLanguageLoaded(String languageCode) {
        return loadingTasks.containsKey(languageCode) || 
               DynamicLang.getInstance(context).languagePacks.containsKey(languageCode);
    }

    /**
     * تحميل عدة لغات متزامنة
     */
    public CompletableFuture<Map<String, DynamicLang.LanguagePack>> loadLanguages(String... languageCodes) {
        CompletableFuture<?>[] futures = new CompletableFuture[languageCodes.length];
        for (int i = 0; i < languageCodes.length; i++) {
            futures[i] = loadLanguage(languageCodes[i]);
        }
        
        return CompletableFuture.allOf(futures)
            .thenApply(v -> {
                Map<String, DynamicLang.LanguagePack> result = new ConcurrentHashMap<>();
                for (String lang : languageCodes) {
                    result.put(lang, DynamicLang.getInstance(context).languagePacks.get(lang));
                }
                return result;
            });
    }
}