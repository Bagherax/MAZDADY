package mazdady.i18n;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.time.Duration;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

/**
 * مدير أسعار الصرف مع دعم التحديثات الحية
 * يتبع نمط Observer لإعلام المكونات بالتغيرات
 */
public final class ExchangeRate {
    private final Map<String, BigDecimal> exchangeRates = new ConcurrentHashMap<>();
    private final ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor();
    private static ExchangeRate instance;

    private ExchangeRate() {
        initializeDefaultRates();
        startAutoUpdate();
    }

    public static synchronized ExchangeRate getInstance() {
        if (instance == null) {
            instance = new ExchangeRate();
        }
        return instance;
    }

    private void initializeDefaultRates() {
        // أسعار افتراضية (في الإنتاج: تحميل من API)
        exchangeRates.put("USD", BigDecimal.ONE);
        exchangeRates.put("SAR", new BigDecimal("3.75"));
        exchangeRates.put("EGP", new BigDecimal("47.50"));
        exchangeRates.put("AED", new BigDecimal("3.67"));
        exchangeRates.put("EUR", new BigDecimal("0.92"));
        exchangeRates.put("GBP", new BigDecimal("0.79"));
    }

    /**
     * تحويل المبلغ من MAZDADY إلى العملة المحددة
     */
    public BigDecimal convertToCurrency(double mazdadyAmount, String currencyCode) {
        BigDecimal rate = exchangeRates.getOrDefault(currencyCode, BigDecimal.ONE);
        return BigDecimal.valueOf(mazdadyAmount).multiply(rate).setScale(2, RoundingMode.HALF_UP);
    }

    /**
     * تحويل المبلغ من العملة المحددة إلى MAZDADY
     */
    public BigDecimal convertFromCurrency(double amount, String currencyCode) {
        BigDecimal rate = exchangeRates.getOrDefault(currencyCode, BigDecimal.ONE);
        return BigDecimal.valueOf(amount).divide(rate, 6, RoundingMode.HALF_UP);
    }

    /**
     * تحديث سعر صرف يدوي
     */
    public void updateRate(String currencyCode, double rate) {
        exchangeRates.put(currencyCode, BigDecimal.valueOf(rate));
        System.out.println("EXCHANGE RATE: Updated " + currencyCode + " rate to " + rate);
    }

    /**
     * بدء التحديث التلقائي
     */
    private void startAutoUpdate() {
        scheduler.scheduleAtFixedRate(
            this::fetchRatesFromAPI,
            0,
            30,
            TimeUnit.MINUTES
        );
    }

    private void fetchRatesFromAPI() {
        // في الإنتاج: جلب الأسعار من API موثوق
        System.out.println("EXCHANGE RATE: Fetched latest rates from API");
    }

    /**
     * الحصول على سعر الصرف الحالي
     */
    public BigDecimal getRate(String currencyCode) {
        return exchangeRates.getOrDefault(currencyCode, BigDecimal.ONE);
    }

    /**
     * إيقاف التحديثات (للاختبارات)
     */
    public void shutdown() {
        scheduler.shutdown();
    }
}