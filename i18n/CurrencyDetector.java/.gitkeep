package mazdady.i18n;

import android.content.Context;
import android.telephony.TelephonyManager;

import java.util.Currency;
import java.util.Locale;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

/**
 * كاشف العملات مع دعم الكشف التلقائي
 * يتبع نمط Singleton مع تهيئة آمنة
 */
public final class CurrencyDetector {
    private final Context context;
    private final Map<String, String> regionCurrencyMap = new ConcurrentHashMap<>();
    private static CurrencyDetector instance;

    private CurrencyDetector(Context context) {
        this.context = context.getApplicationContext();
        initializeRegionCurrencyMap();
    }

    public static synchronized CurrencyDetector getInstance(Context context) {
        if (instance == null) {
            instance = new CurrencyDetector(context);
        }
        return instance;
    }

    private void initializeRegionCurrencyMap() {
        // تهيئة خريطة العملات حسب المنطقة
        regionCurrencyMap.put("SA", "SAR");  // السعودية
        regionCurrencyMap.put("AE", "AED");  // الإمارات
        regionCurrencyMap.put("EG", "EGP");  // مصر
        regionCurrencyMap.put("KW", "KWD");  // الكويت
        regionCurrencyMap.put("QA", "QAR");  // قطر
        regionCurrencyMap.put("BH", "BHD");  // البحرين
        regionCurrencyMap.put("OM", "OMR");  // عمان
        regionCurrencyMap.put("JO", "JOD");  // الأردن
        regionCurrencyMap.put("LB", "LBP");  // لبنان
        regionCurrencyMap.put("SY", "SYP");  // سوريا
        regionCurrencyMap.put("YE", "YER");  // اليمن
        regionCurrencyMap.put("IQ", "IQD");  // العراق
        regionCurrencyMap.put("PS", "ILS");  // فلسطين
        regionCurrencyMap.put("TN", "TND");  // تونس
        regionCurrencyMap.put("MA", "MAD");  // المغرب
        regionCurrencyMap.put("DZ", "DZD");  // الجزائر
        regionCurrencyMap.put("LY", "LYD");  // ليبيا
        
        System.out.println("CURRENCY DETECTOR: Initialized with " + regionCurrencyMap.size() + " region-currency mappings");
    }

    /**
     * كشف العملة التلقائية للمستخدم
     */
    public String detectUserCurrency() {
        try {
            // 1. محاولة الكشف من إعدادات النظام
            String systemCurrency = detectFromSystemSettings();
            if (systemCurrency != null && !systemCurrency.isEmpty()) {
                System.out.println("CURRENCY DETECTOR: Detected from system - " + systemCurrency);
                return systemCurrency;
            }
            
            // 2. محاولة الكشف من شبكة الهاتف
            String networkCurrency = detectFromNetwork();
            if (networkCurrency != null && !networkCurrency.isEmpty()) {
                System.out.println("CURRENCY DETECTOR: Detected from network - " + networkCurrency);
                return networkCurrency;
            }
            
            // 3. استخدام العملة الافتراضية
            String defaultCurrency = "USD";
            System.out.println("CURRENCY DETECTOR: Using default currency - " + defaultCurrency);
            return defaultCurrency;
            
        } catch (Exception e) {
            System.err.println("CURRENCY DETECTION ERROR: " + e.getMessage());
            return "USD"; // العملة الافتراضية
        }
    }

    private String detectFromSystemSettings() {
        try {
            Locale locale = context.getResources().getConfiguration().locale;
            Currency currency = Currency.getInstance(locale);
            return currency != null ? currency.getCurrencyCode() : null;
        } catch (Exception e) {
            return null;
        }
    }

    private String detectFromNetwork() {
        try {
            TelephonyManager tm = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);
            if (tm != null) {
                String countryCode = tm.getNetworkCountryIso();
                if (countryCode != null && !countryCode.isEmpty()) {
                    return regionCurrencyMap.getOrDefault(countryCode.toUpperCase(), "USD");
                }
            }
        } catch (SecurityException e) {
            // إذن الهاتف غير ممنوح
        }
        return null;
    }

    /**
     * الحصول على العملة حسب المنطقة
     */
    public String getCurrencyForRegion(String regionCode) {
        return regionCurrencyMap.getOrDefault(regionCode.toUpperCase(), "USD");
    }

    /**
     * تحديث خريطة العملات من الإعدادات الإدارية
     */
    public void updateRegionCurrencyMap(Map<String, String> newMappings) {
        if (newMappings != null && !newMappings.isEmpty()) {
            regionCurrencyMap.putAll(newMappings);
            System.out.println("CURRENCY DETECTOR: Updated region-currency mappings from admin config");
        }
    }

    /**
     * إضافة تعيين منطقة-عملة جديد
     */
    public void addRegionCurrencyMapping(String regionCode, String currencyCode) {
        if (regionCode != null && currencyCode != null) {
            regionCurrencyMap.put(regionCode.toUpperCase(), currencyCode.toUpperCase());
            System.out.println("CURRENCY DETECTOR: Added mapping " + regionCode + " -> " + currencyCode);
        }
    }

    /**
     * إزالة تعيين منطقة-عملة
     */
    public void removeRegionCurrencyMapping(String regionCode) {
        if (regionCode != null) {
            String removed = regionCurrencyMap.remove(regionCode.toUpperCase());
            if (removed != null) {
                System.out.println("CURRENCY DETECTOR: Removed mapping for " + regionCode);
            }
        }
    }

    // --- Getters ---
    public int getRegionMappingCount() { return regionCurrencyMap.size(); }
    public boolean hasRegionMapping(String regionCode) { return regionCurrencyMap.containsKey(regionCode.toUpperCase()); }
    public Map<String, String> getRegionCurrencyMap() { return new ConcurrentHashMap<>(regionCurrencyMap); }
    
    /**
     * إعادة تعيين الكاشف (للاختبارات)
     */
    public void reset() {
        regionCurrencyMap.clear();
        initializeRegionCurrencyMap();
        System.out.println("CURRENCY DETECTOR: Reset completed");
    }
}