package mazdady.user;

import mazdady.security.SecureStorage;
import mazdady.auth.KYCValidator;

import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.atomic.AtomicReference;

/**
 * مدير المستخدمين مع دعم التحميل الآمن
 * يتبع نمط Singleton مع تهيئة آمنة
 */
public final class UserManager {
    private final ConcurrentHashMap<String, User> userCache = new ConcurrentHashMap<>();
    private final SecureStorage secureStorage;
    private final AtomicReference<User> currentUser = new AtomicReference<>();
    private static UserManager instance;

    private UserManager(SecureStorage secureStorage) {
        this.secureStorage = secureStorage;
        loadCurrentUser();
    }

    public static synchronized UserManager getInstance(SecureStorage secureStorage) {
        if (instance == null) {
            instance = new UserManager(secureStorage != null ? secureStorage : new SecureStorage());
        }
        return instance;
    }

    /**
     * تحميل المستخدم الحالي
     */
    private void loadCurrentUser() {
        try {
            // في الإنتاج: تحميل من التخزين الآمن
            String userId = secureStorage.decrypt("current_user_id_encrypted");
            if (userId != null && !userId.isEmpty()) {
                User user = getUserById(userId);
                currentUser.set(user);
                System.out.println("USER MANAGER: Current user loaded - " + userId);
            } else {
                // مستخدم جديد
                createUser();
            }
        } catch (Exception e) {
            System.err.println("USER LOAD ERROR: " + e.getMessage());
            createUser();
        }
    }

    /**
     * إنشاء مستخدم جديد
     */
    private void createUser() {
        String userId = "user_" + System.currentTimeMillis();
        User newUser = new User(userId);
        userCache.put(userId, newUser);
        currentUser.set(newUser);
        
        // حفظ المستخدم في التخزين الآمن
        try {
            secureStorage.encrypt("current_user_id_encrypted", userId);
            System.out.println("USER MANAGER: New user created - " + userId);
        } catch (Exception e) {
            System.err.println("USER SAVE ERROR: " + e.getMessage());
        }
    }

    /**
     * الحصول على مستخدم حسب المعرف
     */
    public User getUserById(String userId) {
        if (userId == null || userId.isEmpty()) return null;
        
        return userCache.computeIfAbsent(userId, User::new);
    }

    /**
     * تحديث رصيد المستخدم
     */
    public void updateBalance(double newBalance) {
        User user = currentUser.get();
        if (user != null) {
            user.setBalance(newBalance);
            System.out.println("USER MANAGER: Balance updated to " + newBalance);
        }
    }

    /**
     * إضافة رصيد للمستخدم
     */
    public void addBalance(double amount) {
        User user = currentUser.get();
        if (user != null) {
            user.addBalance(amount);
            System.out.println("USER MANAGER: Added " + amount + " to balance");
        }
    }

    /**
     * خصم رصيد من المستخدم
     */
    public boolean deductBalance(double amount) {
        User user = currentUser.get();
        if (user != null) {
            boolean success = user.deductBalance(amount);
            if (success) {
                System.out.println("USER MANAGER: Deducted " + amount + " from balance");
            }
            return success;
        }
        return false;
    }

    /**
     * مستخدم جديد؟
     */
    public boolean isNewUser() {
        User user = currentUser.get();
        return user != null && user.isNewUser();
    }

    /**
     * مستخدم نشط؟
     */
    public boolean isRecentlyActive() {
        User user = currentUser.get();
        return user != null && user.isRecentlyActive();
    }

    /**
     * مستخدم محظوظ؟
     */
    public boolean hasRecentProfit() {
        User user = currentUser.get();
        return user != null && user.hasRecentProfit();
    }

    // --- Getters ---
    public User getCurrentUser() { return currentUser.get(); }
    public int getUserCount() { return userCache.size(); }
    public void setCurrentUser(User user) { currentUser.set(user); }
    public SecureStorage getSecureStorage() { return secureStorage; }
    
    /**
     * إزالة مستخدم (للاختبارات)
     */
    public void removeUser(String userId) {
        userCache.remove(userId);
        System.out.println("USER MANAGER: User removed - " + userId);
    }
}