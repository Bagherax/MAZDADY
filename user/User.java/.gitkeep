package mazdady.user;

import mazdady.wallet.WalletManager;
import mazdady.auth.KYCValidator;

import java.time.Instant;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicReference;

/**
 * نموذج المستخدم الكامل مع دعم جميع الحالات
 * يتبع نمط State لتمثيل حالات المستخدم المختلفة
 */
public final class User {
    private final String userId;
    private final AtomicReference<String> phoneNumber = new AtomicReference<>();
    private final AtomicReference<String> email = new AtomicReference<>();
    private final AtomicReference<String> walletAddress = new AtomicReference<>();
    private final AtomicInteger level = new AtomicInteger(1);
    private final AtomicReference<Double> balance = new AtomicReference<>(0.0);
    private final AtomicInteger communityPoints = new AtomicInteger(0);
    private final AtomicReference<KYCStatus> kycStatus = new AtomicReference<>(new KYCStatus());
    private final AtomicReference<SubscriptionManager.Subscription> subscription = new AtomicReference<>();
    private final AtomicReference<Instant> registrationDate = new AtomicReference<>(Instant.now());
    private final AtomicReference<Instant> lastActivityDate = new AtomicReference<>(Instant.now());
    private final AtomicInteger streakDays = new AtomicInteger(0);
    private final AtomicInteger referralCount = new AtomicInteger(0);
    private final AtomicReference<Instant> lastDailyRewardDate = new AtomicReference<>();
    private final AtomicInteger dailyRewardStreak = new AtomicInteger(0);
    private final AtomicReference<UserState> state = new AtomicReference<>(UserState.ACTIVE);

    public User(String userId) {
        this.userId = userId;
    }

    /**
     * التحقق من حالة المستخدم
     */
    public boolean isActive() {
        return state.get() == UserState.ACTIVE;
    }

    public boolean isSuspended() {
        return state.get() == UserState.SUSPENDED;
    }

    public boolean isBanned() {
        return state.get() == UserState.BANNED;
    }

    /**
     * تفعيل المستخدم
     */
    public void activate() {
        state.set(UserState.ACTIVE);
        System.out.println("USER: " + userId + " activated");
    }

    /**
     * تعليق المستخدم
     */
    public void suspend(String reason) {
        state.set(UserState.SUSPENDED);
        System.out.println("USER: " + userId + " suspended - Reason: " + reason);
    }

    /**
     * حظر المستخدم
     */
    public void ban(String reason) {
        state.set(UserState.BANNED);
        System.out.println("USER: " + userId + " banned - Reason: " + reason);
    }

    /**
     * التحقق من KYC
     */
    public boolean isKYCVerified() {
        KYCStatus status = kycStatus.get();
        return status != null && status.isVerified();
    }

    /**
     * التحقق من الاشتراك
     */
    public boolean hasActiveSubscription() {
        SubscriptionManager.Subscription sub = subscription.get();
        return sub != null && sub.isActive();
    }

    /**
     * مستخدم جديد؟
     */
    public boolean isNewUser() {
        Instant regDate = registrationDate.get();
        return regDate != null && 
               (System.currentTimeMillis() - regDate.toEpochMilli()) < 24 * 60 * 60 * 1000;
    }

    /**
     * مستخدم نشط؟
     */
    public boolean isRecentlyActive() {
        Instant lastActivity = lastActivityDate.get();
        return lastActivity != null && 
               (System.currentTimeMillis() - lastActivity.toEpochMilli()) < 30 * 60 * 1000;
    }

    /**
     * مستخدم محظوظ؟
     */
    public boolean hasRecentProfit() {
        // في الإنتاج: التحقق من وجود ربح حديث
        return balance.get() > 1000.0;
    }

    /**
     * زيادة الرصيد
     */
    public void addBalance(double amount) {
        if (amount > 0) {
            balance.updateAndGet(current -> current + amount);
            System.out.println("USER: " + userId + " balance increased by " + amount);
        }
    }

    /**
     * خصم الرصيد
     */
    public boolean deductBalance(double amount) {
        if (amount <= 0) return false;
        
        return balance.getAndUpdate(current -> {
            if (current >= amount) {
                return current - amount;
            }
            return current;
        }) >= amount;
    }

    /**
     * إضافة نقاط مجتمعية
     */
    public void addCommunityPoints(int points) {
        if (points > 0) {
            communityPoints.addAndGet(points);
            System.out.println("USER: " + userId + " community points increased by " + points);
        }
    }

    /**
     * زيادة عدد الإحالات
     */
    public void incrementReferralCount() {
        referralCount.incrementAndGet();
        System.out.println("USER: " + userId + " referral count incremented");
    }

    /**
     * تحديث تاريخ آخر نشاط
     */
    public void updateLastActivity() {
        lastActivityDate.set(Instant.now());
    }

    // --- Getters/Setters ---
    public String getUserId() { return userId; }
    public String getPhoneNumber() { return phoneNumber.get(); }
    public void setPhoneNumber(String number) { phoneNumber.set(number); }
    public String getEmail() { return email.get(); }
    public void setEmail(String mail) { email.set(mail); }
    public String getWalletAddress() { return walletAddress.get(); }
    public void setWalletAddress(String address) { walletAddress.set(address); }
    public int getLevel() { return level.get(); }
    public void setLevel(int lvl) { level.set(lvl); }
    public double getBalance() { return balance.get(); }
    public void setBalance(double bal) { balance.set(bal); }
    public int getCommunityPoints() { return communityPoints.get(); }
    public KYCStatus getKycStatus() { return kycStatus.get(); }
    public void setKycStatus(KYCStatus status) { kycStatus.set(status); }
    public SubscriptionManager.Subscription getSubscription() { return subscription.get(); }
    public void setSubscription(SubscriptionManager.Subscription sub) { subscription.set(sub); }
    public Instant getRegistrationDate() { return registrationDate.get(); }
    public Instant getLastActivityDate() { return lastActivityDate.get(); }
    public void setLastActivityDate(Instant date) { lastActivityDate.set(date); }
    public int getStreakDays() { return streakDays.get(); }
    public void setStreakDays(int days) { streakDays.set(days); }
    public int getReferralCount() { return referralCount.get(); }
    public Instant getLastDailyRewardDate() { return lastDailyRewardDate.get(); }
    public void setLastDailyRewardDate(Instant date) { lastDailyRewardDate.set(date); }
    public int getDailyRewardStreak() { return dailyRewardStreak.get(); }
    public void setDailyRewardStreak(int streak) { dailyRewardStreak.set(streak); }
    public UserState getState() { return state.get(); }
    public void setState(UserState state) { this.state.set(state); }

    /**
     * حالات المستخدم
     */
    public enum UserState {
        ACTIVE, SUSPENDED, BANNED, INACTIVE
    }
}