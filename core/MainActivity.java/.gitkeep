package mazdady.core;

import android.os.Bundle;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.TextView;
import androidx.appcompat.app.AppCompatActivity;

import mazdady.admin.AdminConfig;
import mazdady.dev.UnitTests;
import mazdady.i18n.TranslationManager;
import mazdady.ui.*;
import mazdady.user.User;
import mazdady.user.UserManager;
import mazdady.wallet.WalletManager;
import mazdady.trading.PriceEngine;
import mazdady.bot.BotManager;
import mazdady.security.SecurityMgr;
import mazdady.security.RootDetection;
import mazdady.security.AppIntegrityChecker;

import java.util.Map;
import java.util.concurrent.CompletableFuture;

/**
 * النشاط الرئيسي المتكامل مع دعم جميع الميزات المتقدمة
 * يتبع نمط Template Method لفصل خطوات التهيئة
 */
public final class MainActivity extends AppCompatActivity {
    // --- المكونات الأساسية ---
    private DynamicPopupManager popupManager;
    private TranslationManager translationManager;
    private TextView balanceView;
    private Button buyButton, sellButton;
    
    // --- المديرون المتقدمون ---
    private PriceEngine priceEngine;
    private WalletManager walletManager;
    private BotManager botManager;
    private SecurityMgr securityMgr;
    private UserManager userManager;
    
    // --- العناصر الديناميكية ---
    private FloatingAdButton floatingAdButton;
    private StarEffectManager starEffectManager;
    private DynamicLayoutManager dynamicLayoutManager;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        // 1. تشغيل اختبارات الوحدة (للاختبار فقط)
        UnitTests.runAllTests();

        // 2. تهيئة المكونات الأساسية
        initializeCoreComponents();
        
        // 3. تهيئة واجهة المستخدم
        initializeUI();
        
        // 4. تهيئة الأحداث
        initializeEventHandlers();
        
        // 5. عرض تأثيرات الترحيب
        showWelcomeEffects();
        
        // 6. إعداد الزر العائم للإعلانات
        setupFloatingAdButton();
        
        // 7. التحقق من المستخدم الجديد
        checkForNewUser();
        
        // 8. تطبيق التخطيط الديناميكي
        applyDynamicLayout();
        
        // 9. التحقق من الأمان
        performSecurityCheck();
        
        System.out.println("MAIN ACTIVITY: ✅ Created successfully with all advanced features");
    }

    // --- 1. تهيئة المكونات الأساسية ---
    private void initializeCoreComponents() {
        try {
            // تحميل الإعدادات من السيرفر
            AdminConfig.getInstance().loadFromServer();
            
            // تهيئة مديري النظام
            popupManager = new DynamicPopupManager(this);
            translationManager = new TranslationManager(this);
            userManager = UserManager.getInstance(this);
            priceEngine = PriceEngine.getInstance();
            walletManager = new WalletManager();
            botManager = BotManager.getInstance(priceEngine);
            securityMgr = SecurityMgr.getInstance(this);
            starEffectManager = new StarEffectManager();
            dynamicLayoutManager = new DynamicLayoutManager((ViewGroup) findViewById(android.R.id.content));
            
            System.out.println("MAIN ACTIVITY: Core components initialized");
            
        } catch (Exception e) {
            System.err.println("CORE INITIALIZATION ERROR: " + e.getMessage());
        }
    }

    // --- 2. تهيئة واجهة المستخدم ---
    private void initializeUI() {
        try {
            // ربط العناصر من التخطيط
            balanceView = findViewById(R.id.balance_view);
            buyButton = findViewById(R.id.buy_button);
            sellButton = findViewById(R.id.sell_button);

            // تحميل رصيد المستخدم وترجمته
            User user = userManager.getCurrentUser();
            double balance = user.getBalance();
            String balanceText = translationManager.getString("balance_label", String.format("%.2f", balance));
            balanceView.setText(balanceText);

            // ترجمة أزرار التداول
            buyButton.setText(translationManager.getString("buy_button"));
            sellButton.setText(translationManager.getString("sell_button"));

            // تطبيق إعدادات الواجهة الديناميكية
            applyDynamicUI();
            
            System.out.println("MAIN ACTIVITY: UI initialized");
            
        } catch (Exception e) {
            System.err.println("UI INITIALIZATION ERROR: " + e.getMessage());
        }
    }

    // --- 3. تهيئة الأحداث ---
    private void initializeEventHandlers() {
        try {
            buyButton.setOnClickListener(v -> showBuyPopup());
            sellButton.setOnClickListener(v -> showSellPopup());
            
            // زر السحب (إذا كان موجودًا في التخطيط)
            View withdrawButton = findViewById(R.id.withdraw_button);
            if (withdrawButton != null) {
                withdrawButton.setOnClickListener(v -> handleWithdrawal());
            }
            
            System.out.println("MAIN ACTIVITY: Event handlers initialized");
            
        } catch (Exception e) {
            System.err.println("EVENT HANDLER ERROR: " + e.getMessage());
        }
    }

    // --- 4. عرض تأثيرات الترحيب ---
    private void showWelcomeEffects() {
        try {
            User user = userManager.getCurrentUser();
            if (user.hasRecentProfit()) {
                starEffectManager.showStar(this, findViewById(R.id.main_container));
            }
            
            System.out.println("MAIN ACTIVITY: Welcome effects shown");
            
        } catch (Exception e) {
            System.err.println("WELCOME EFFECT ERROR: " + e.getMessage());
        }
    }

    // --- 5. إعداد الزر العائم للإعلانات ---
    private void setupFloatingAdButton() {
        try {
            AdminConfig.UIConfig uiConfig = AdminConfig.getInstance().getUIConfig();
            if (!uiConfig.getFloatingAdConfig().isEnabled()) return;

            floatingAdButton = new FloatingAdButton(this, null);
            floatingAdButton.configure(
                uiConfig.getFloatingAdConfig().getDisplayDuration(),
                uiConfig.getFloatingAdConfig().getHideDuration(),
                uiConfig.getFloatingAdConfig().getAdImageUrl()
            );

            ViewGroup.LayoutParams params = new ViewGroup.LayoutParams(120, 120);
            ((ViewGroup) findViewById(android.R.id.content)).addView(floatingAdButton, params);
            
            System.out.println("MAIN ACTIVITY: Floating ad button setup completed");
            
        } catch (Exception e) {
            System.err.println("FLOATING AD SETUP ERROR: " + e.getMessage());
        }
    }

    // --- 6. التحقق من المستخدم الجديد ---
    private void checkForNewUser() {
        try {
            if (userManager.isNewUser()) {
                showSignUpPopup();
            }
            
            System.out.println("MAIN ACTIVITY: New user check completed");
            
        } catch (Exception e) {
            System.err.println("NEW USER CHECK ERROR: " + e.getMessage());
        }
    }

    // --- 7. تطبيق التخطيط الديناميكي ---
    private void applyDynamicLayout() {
        try {
            dynamicLayoutManager.applyLayout();
            System.out.println("MAIN ACTIVITY: Dynamic layout applied");
            
        } catch (Exception e) {
            System.err.println("DYNAMIC LAYOUT ERROR: " + e.getMessage());
        }
    }

    // --- 8. التحقق من الأمان ---
    private void performSecurityCheck() {
        try {
            // التحقق من جذور الجهاز
            if (RootDetection.isDeviceRooted()) {
                securityMgr.reportSuspiciousActivity("ROOTED_DEVICE");
            }

            // التحقق من سلامة التطبيق
            if (!AppIntegrityChecker.isAppIntegrityValid(this)) {
                securityMgr.reportSuspiciousActivity("MODIFIED_APP");
            }
            
            System.out.println("MAIN ACTIVITY: Security check completed");
            
        } catch (Exception e) {
            System.err.println("SECURITY CHECK ERROR: " + e.getMessage());
        }
    }

    // --- 9. معالجة السحب ---
    private void handleWithdrawal() {
        try {
            if (walletManager.getConnector().isConnected()) {
                boolean success = walletManager.withdrawMAZDADY(100.0);
                if (success) {
                    showPopup(translationManager.getString("withdrawal_success"));
                }
            } else {
                showWalletConnectionPopup();
            }
            
            System.out.println("MAIN ACTIVITY: Withdrawal handled");
            
        } catch (Exception e) {
            System.err.println("WITHDRAWAL ERROR: " + e.getMessage());
        }
    }

    // --- 10. عرض النوافذ المنبثقة ---
    private void showBuyPopup() {
        try {
            String content = translationManager.getString("buy_popup_content");
            popupManager.showScrollablePopup(
                translationManager.getString("buy_title"), 
                content
            );
            
            System.out.println("MAIN ACTIVITY: Buy popup shown");
            
        } catch (Exception e) {
            System.err.println("BUY POPUP ERROR: " + e.getMessage());
        }
    }

    private void showSellPopup() {
        try {
            String content = translationManager.getString("sell_popup_content");
            popupManager.showScrollablePopup(
                translationManager.getString("sell_title"), 
                content
            );
            
            System.out.println("MAIN ACTIVITY: Sell popup shown");
            
        } catch (Exception e) {
            System.err.println("SELL POPUP ERROR: " + e.getMessage());
        }
    }

    private void showSignUpPopup() {
        try {
            String content = translationManager.getString("signup_welcome");
            popupManager.showScrollablePopup(
                translationManager.getString("welcome_title"), 
                content
            );
            
            System.out.println("MAIN ACTIVITY: Sign-up popup shown");
            
        } catch (Exception e) {
            System.err.println("SIGNUP POPUP ERROR: " + e.getMessage());
        }
    }

    private void showWalletConnectionPopup() {
        try {
            String content = translationManager.getString("connect_wallet_message");
            popupManager.showScrollablePopup(
                translationManager.getString("connect_wallet_title"), 
                content
            );
            
            System.out.println("MAIN ACTIVITY: Wallet connection popup shown");
            
        } catch (Exception e) {
            System.err.println("WALLET CONNECTION POPUP ERROR: " + e.getMessage());
        }
    }

    private void showPopup(String message) {
        try {
            popupManager.showScrollablePopup(
                translationManager.getString("notification"), 
                message
            );
            
            System.out.println("MAIN ACTIVITY: Generic popup shown - " + message);
            
        } catch (Exception e) {
            System.err.println("GENERIC POPUP ERROR: " + e.getMessage());
        }
    }

    // --- 11. تطبيق الواجهة الديناميكية ---
    private void applyDynamicUI() {
        try {
            // في الإنتاج: تطبيق الإعدادات من AdminConfig
            System.out.println("MAIN ACTIVITY: Dynamic UI applied");
            
        } catch (Exception e) {
            System.err.println("DYNAMIC UI ERROR: " + e.getMessage());
        }
    }

    // --- 12. تحديث الثيم ---
    private void updateTheme(String theme) {
        try {
            // في الإنتاج: تطبيق الثيم
            System.out.println("MAIN ACTIVITY: Theme updated to " + theme);
            
        } catch (Exception e) {
            System.err.println("THEME UPDATE ERROR: " + e.getMessage());
        }
    }

    // --- 13. تحديث الألوان ---
    private void updateColors(Map<String, String> colors) {
        try {
            // في الإنتاج: تطبيق الألوان
            System.out.println("MAIN ACTIVITY: Colors updated - " + colors.size() + " colors");
            
        } catch (Exception e) {
            System.err.println("COLOR UPDATE ERROR: " + e.getMessage());
        }
    }

    // --- 14. تحديث الأحجام ---
    private void updateSizes(Map<String, Integer> sizes) {
        try {
            // في الإنتاج: تطبيق الأحجام
            System.out.println("MAIN ACTIVITY: Sizes updated - " + sizes.size() + " sizes");
            
        } catch (Exception e) {
            System.err.println("SIZE UPDATE ERROR: " + e.getMessage());
        }
    }

    // --- 15. تطبيق التحديثات الديناميكية ---
    private void applyDynamicUpdates() {
        try {
            // تطبيق التحديثات من الإعدادات الإدارية
            AdminConfig.UIConfig uiConfig = AdminConfig.getInstance().getUIConfig();
            
            // تحديث المظهر
            updateTheme(uiConfig.getTheme());
            
            // تحديث الألوان
            updateColors(uiConfig.getColors());
            
            // تحديث الأحجام
            updateSizes(uiConfig.getSizes());
            
            System.out.println("MAIN ACTIVITY: Dynamic updates applied");
            
        } catch (Exception e) {
            System.err.println("DYNAMIC UPDATE ERROR: " + e.getMessage());
        }
    }

    // --- دورة حياة النشاط ---
    @Override
    protected void onResume() {
        super.onResume();
        try {
            // تحديث الرصيد عند العودة للواجهة
            User user = userManager.getCurrentUser();
            double balance = user.getBalance();
            String balanceText = translationManager.getString("balance_label", String.format("%.2f", balance));
            balanceView.setText(balanceText);
            
            System.out.println("MAIN ACTIVITY: Resumed - Balance updated");
            
        } catch (Exception e) {
            System.err.println("RESUME ERROR: " + e.getMessage());
        }
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        try {
            // تنظيف الموارد
            if (popupManager != null) {
                popupManager.cleanup();
            }
            if (floatingAdButton != null) {
                ((ViewGroup) findViewById(android.R.id.content)).removeView(floatingAdButton);
            }
            
            System.out.println("MAIN ACTIVITY: Destroyed - Resources cleaned up");
            
        } catch (Exception e) {
            System.err.println("DESTROY ERROR: " + e.getMessage());
        }
    }

    // --- Getters ---
    public DynamicPopupManager getPopupManager() { return popupManager; }
    public TextView getBalanceView() { return balanceView; }
    public Button getBuyButton() { return buyButton; }
    public Button getSellButton() { return sellButton; }
    public PriceEngine getPriceEngine() { return priceEngine; }
    public WalletManager getWalletManager() { return walletManager; }
    public BotManager getBotManager() { return botManager; }
    public SecurityMgr getSecurityMgr() { return securityMgr; }
    public UserManager getUserManager() { return userManager; }
    public FloatingAdButton getFloatingAdButton() { return floatingAdButton; }
    public StarEffectManager getStarEffectManager() { return starEffectManager; }
    public DynamicLayoutManager getDynamicLayoutManager() { return dynamicLayoutManager; }
    
    /**
     * إعادة تعيين النشاط (للاختبارات)
     */
    public void reset() {
        System.out.println("MAIN ACTIVITY: Reset completed");
    }
}