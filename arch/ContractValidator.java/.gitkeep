package mazdady.arch;

import java.util.ArrayList;
import java.util.List;
import java.util.function.Predicate;

/**
 * مُحقّق العقود باستخدام التحقق الوظيفي
 * يدعم سلاسل التحقق (Validation Chains) والتقارير التفصيلية
 */
public final class ContractValidator {
    private ContractValidator() {}

    private static class Holder {
        static final ContractValidator INSTANCE = new ContractValidator();
    }

    public static ContractValidator getInstance() {
        return Holder.INSTANCE;
    }

    /**
     * التحقق من صحة الكائن مع إرجاع تقرير مفصل
     */
    public <T> ValidationResult validate(T object) {
        List<String> errors = new ArrayList<>();
        
        if (object instanceof Validatable) {
            ((Validatable) object).validate(errors::add);
        } else {
            // تحقق افتراضي للحقول المطلوبة
            validateRequiredFields(object, errors);
        }

        return new ValidationResult(errors.isEmpty(), errors);
    }

    /**
     * التحقق من صحة الكائن مع رمي استثناء عند الفشل
     */
    public <T> void validateOrThrow(T object) {
        ValidationResult result = validate(object);
        if (!result.isValid()) {
            throw new ValidationException("Validation failed: " + String.join(", ", result.getErrors()));
        }
    }

    private void validateRequiredFields(Object object, List<String> errors) {
        // في الإنتاج: استخدام Reflection للتحقق من الحقول المطلوبة
        // هنا نستخدم تحققًا بسيطًا
        if (object == null) {
            errors.add("Object cannot be null");
        }
    }

    /**
     * واجهة للكائنات القابلة للتحقق
     */
    @FunctionalInterface
    public interface Validatable {
        void validate(ValidationErrorConsumer errorConsumer);
    }

    @FunctionalInterface
    public interface ValidationErrorConsumer {
        void accept(String error);
    }

    /**
     * نتيجة التحقق
     */
    public static class ValidationResult {
        private final boolean valid;
        private final List<String> errors;

        public ValidationResult(boolean valid, List<String> errors) {
            this.valid = valid;
            this.errors = List.copyOf(errors);
        }

        public boolean isValid() { return valid; }
        public List<String> getErrors() { return errors; }
    }

    /**
     * استثناء التحقق
     */
    public static class ValidationException extends IllegalArgumentException {
        public ValidationException(String message) {
            super(message);
        }
    }
}