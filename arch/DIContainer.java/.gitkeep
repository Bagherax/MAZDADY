package mazdady.arch;

import mazdady.user.UserManager;
import mazdady.security.SecurityMonitor;
import mazdady.wallet.WalletManager;
import mazdady.trading.PriceEngine;
import mazdady.bot.BotController;
import mazdady.admin.AdminConfig;

import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.function.Supplier;

/**
 * حاوية حقن التبعيات مع دعم النطاقات المتقدمة
 * يتبع نمط Singleton مع تهيئة آمنة
 */
public final class DIContainer {
    private final Map<Class<?>, Supplier<Object>> bindings = new ConcurrentHashMap<>();
    private final Map<Class<?>, Object> singletons = new ConcurrentHashMap<>();
    private static DIContainer instance;

    private DIContainer(
        UserManager userManager,
        SecurityMonitor securityMonitor,
        WalletManager walletManager,
        PriceEngine priceEngine,
        BotController botController,
        AdminConfig adminConfig
    ) {
        initializeBindings(userManager, securityMonitor, walletManager, priceEngine, botController, adminConfig);
    }

    public static synchronized DIContainer getInstance(
        UserManager userManager,
        SecurityMonitor securityMonitor,
        WalletManager walletManager,
        PriceEngine priceEngine,
        BotController botController,
        AdminConfig adminConfig
    ) {
        if (instance == null) {
            instance = new DIContainer(userManager, securityMonitor, walletManager, priceEngine, botController, adminConfig);
        }
        return instance;
    }

    private void initializeBindings(
        UserManager userManager,
        SecurityMonitor securityMonitor,
        WalletManager walletManager,
        PriceEngine priceEngine,
        BotController botController,
        AdminConfig adminConfig
    ) {
        // ربط المكونات الأساسية كـ Singletons
        bindSingleton(UserManager.class, () -> userManager);
        bindSingleton(SecurityMonitor.class, () -> securityMonitor);
        bindSingleton(WalletManager.class, () -> walletManager);
        bindSingleton(PriceEngine.class, () -> priceEngine);
        bindSingleton(BotController.class, () -> botController);
        bindSingleton(AdminConfig.class, () -> adminConfig);
        
        // ربط المكونات المتقدمة
        bindSingleton(BusinessInteractor.class, () -> 
            BusinessInteractor.getInstance(userManager, securityMonitor)
        );
        
        bindSingleton(ContractValidator.class, () -> 
            ContractValidator.getInstance(securityMonitor)
        );
        
        bindSingleton(DependencyResolver.class, () -> 
            DependencyResolver.getInstance()
        );
        
        bindSingleton(UseCaseExecutor.class, () -> 
            UseCaseExecutor.getInstance(userManager, securityMonitor, walletManager, priceEngine, botController, adminConfig)
        );
    }

    /**
     * ربط واجهة بتنفيذ معين
     */
    public <T> void bind(Class<T> interfaceType, Supplier<T> implementation) {
        bindings.put(interfaceType, () -> implementation.get());
    }

    /**
     * ربط كـ Singleton
     */
    public <T> void bindSingleton(Class<T> interfaceType, Supplier<T> implementation) {
        bindings.put(interfaceType, () -> singletons.computeIfAbsent(interfaceType, k -> implementation.get()));
    }

    /**
     * الحصول على مثيل من الحاوية
     */
    @SuppressWarnings("unchecked")
    public <T> T get(Class<T> type) {
        Supplier<Object> supplier = bindings.get(type);
        if (supplier == null) {
            throw new IllegalStateException("No binding found for: " + type.getName());
        }
        return (T) supplier.get();
    }

    /**
     * تحديث رابط في الحاوية
     */
    public <T> void updateBinding(Class<T> interfaceType, Supplier<T> newImplementation) {
        bindings.put(interfaceType, () -> newImplementation.get());
        singletons.remove(interfaceType); // إزالة Singleton القديم إذا وُجد
        System.out.println("DI CONTAINER: Updated binding for " + interfaceType.getName());
    }

    /**
     * إزالة رابط من الحاوية
     */
    public <T> void removeBinding(Class<T> interfaceType) {
        bindings.remove(interfaceType);
        singletons.remove(interfaceType);
        System.out.println("DI CONTAINER: Removed binding for " + interfaceType.getName());
    }

    // --- Getters ---
    public int getBindingCount() { return bindings.size(); }
    public int getSingletonCount() { return singletons.size(); }
    public boolean hasBinding(Class<?> type) { return bindings.containsKey(type); }
    public boolean hasSingleton(Class<?> type) { return singletons.containsKey(type); }
    
    /**
     * إعادة تهيئة الحاوية (للاختبارات)
     */
    public void reset() {
        bindings.clear();
        singletons.clear();
        System.out.println("DI CONTAINER: Reset completed");
    }
}