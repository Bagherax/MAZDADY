package mazdady.feature;

import mazdady.user.User;
import mazdady.user.UserManager;

import java.time.Duration;
import java.time.Instant;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicReference;
import java.util.function.Consumer;

/**
 * ميزة محدودة زمنيًا مع دعم التحكم المتقدم
 * يتبع نمط State لتمثيل حالات الميزة
 */
public final class TimeLimitedFeature {
    private final String featureId;
    private final Duration duration;
    private final Instant startTime;
    private final AtomicReference<FeatureState> state = new AtomicReference<>(FeatureState.ACTIVE);
    private final AtomicBoolean isExpired = new AtomicBoolean(false);
    private final Consumer<FeatureEvent> eventListener;

    public TimeLimitedFeature(String featureId, Duration duration, Consumer<FeatureEvent> eventListener) {
        this.featureId = featureId;
        this.duration = duration;
        this.startTime = Instant.now();
        this.eventListener = eventListener;
        
        // جدولة انتهاء الميزة
        scheduleExpiration();
    }

    private void scheduleExpiration() {
        new Thread(() -> {
            try {
                Thread.sleep(duration.toMillis());
                expireFeature();
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
        }).start();
    }

    private void expireFeature() {
        if (isExpired.compareAndSet(false, true)) {
            state.set(FeatureState.EXPIRED);
            
            if (eventListener != null) {
                eventListener.accept(new FeatureEvent(
                    FeatureEvent.EventType.FEATURE_EXPIRED,
                    featureId,
                    "Feature expired after " + duration.getSeconds() + " seconds",
                    Instant.now()
                ));
            }
            
            System.out.println("TIME LIMITED FEATURE: " + featureId + " expired");
        }
    }

    /**
     * التحقق من صلاحية الميزة
     */
    public boolean isValid() {
        return !isExpired.get() && state.get() == FeatureState.ACTIVE;
    }

    /**
     * تعطيل الميزة يدويًا
     */
    public void disable() {
        if (state.compareAndSet(FeatureState.ACTIVE, FeatureState.DISABLED)) {
            isExpired.set(true);
            
            if (eventListener != null) {
                eventListener.accept(new FeatureEvent(
                    FeatureEvent.EventType.FEATURE_DISABLED,
                    featureId,
                    "Feature manually disabled",
                    Instant.now()
                ));
            }
            
            System.out.println("TIME LIMITED FEATURE: " + featureId + " manually disabled");
        }
    }

    /**
     * تفعيل الميزة يدويًا
     */
    public void enable() {
        if (isExpired.get()) return;
        
        if (state.compareAndSet(FeatureState.DISABLED, FeatureState.ACTIVE)) {
            if (eventListener != null) {
                eventListener.accept(new FeatureEvent(
                    FeatureEvent.EventType.FEATURE_ENABLED,
                    featureId,
                    "Feature manually enabled",
                    Instant.now()
                ));
            }
            
            System.out.println("TIME LIMITED FEATURE: " + featureId + " manually enabled");
        }
    }

    /**
     * الحصول على الوقت المتبقي
     */
    public Duration getRemainingTime() {
        if (isExpired.get()) return Duration.ZERO;
        
        Instant now = Instant.now();
        Instant expiryTime = startTime.plus(duration);
        return Duration.between(now, expiryTime);
    }

    /**
     * تجديد الميزة
     */
    public TimeLimitedFeature renew(Duration additionalDuration) {
        if (isExpired.get()) {
            // إنشاء ميزة جديدة إذا كانت منتهية
            return new TimeLimitedFeature(featureId, additionalDuration, eventListener);
        }
        
        // تمديد الميزة الحالية
        Duration newDuration = this.duration.plus(additionalDuration);
        return new TimeLimitedFeature(featureId, newDuration, eventListener);
    }

    // --- Getters ---
    public String getFeatureId() { return featureId; }
    public Duration getDuration() { return duration; }
    public Instant getStartTime() { return startTime; }
    public FeatureState getState() { return state.get(); }
    public boolean isExpired() { return isExpired.get(); }
    
    /**
     * حالة الميزة
     */
    public enum FeatureState {
        ACTIVE, DISABLED, EXPIRED
    }

    /**
     * حدث الميزة
     */
    public static final class FeatureEvent {
        private final EventType type;
        private final String featureId;
        private final String message;
        private final Instant timestamp;

        public FeatureEvent(EventType type, String featureId, String message, Instant timestamp) {
            this.type = type;
            this.featureId = featureId;
            this.message = message;
            this.timestamp = timestamp;
        }

        public enum EventType {
            FEATURE_EXPIRED, FEATURE_DISABLED, FEATURE_ENABLED, FEATURE_RENEWED
        }

        // Getters
        public EventType getType() { return type; }
        public String getFeatureId() { return featureId; }
        public String getMessage() { return message; }
        public Instant getTimestamp() { return timestamp; }
    }

    /**
     * نتيجة الميزة
     */
    public static final class FeatureResult {
        private final boolean success;
        private final TimeLimitedFeature feature;
        private final String message;

        private FeatureResult(boolean success, TimeLimitedFeature feature, String message) {
            this.success = success;
            this.feature = feature;
            this.message = message;
        }

        public static FeatureResult success(TimeLimitedFeature feature, String message) {
            return new FeatureResult(true, feature, message);
        }

        public static FeatureResult failure(String message) {
            return new FeatureResult(false, null, message);
        }

        public boolean isSuccess() { return success; }
        public TimeLimitedFeature getFeature() { return feature; }
        public String getMessage() { return message; }
    }

    /**
     * إيقاف الميزة (للاختبارات)
     */
    public void shutdown() {
        isExpired.set(true);
        state.set(FeatureState.EXPIRED);
        System.out.println("TIME LIMITED FEATURE: " + featureId + " shutdown completed");
    }
}