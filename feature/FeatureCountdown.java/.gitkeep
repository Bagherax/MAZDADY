package mazdady.feature;

import mazdady.user.User;
import mazdady.user.UserManager;
import mazdady.admin.AdminConfig;

import java.time.Duration;
import java.time.Instant;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;

/**
 * عداد تنازلي للميزات مع دعم التحديثات الحية
 * يتبع نمط Observer لإعلام النظام بتغيرات العداد
 */
public final class FeatureCountdown {
    private final Map<String, FeatureTimer> activeTimers = new ConcurrentHashMap<>();
    private final ScheduledExecutorService countdownScheduler = Executors.newScheduledThreadPool(1);
    private final AdminConfig.FeatureConfig featureConfig;
    private static FeatureCountdown instance;

    private FeatureCountdown(AdminConfig.FeatureConfig featureConfig) {
        this.featureConfig = featureConfig;
        startCountdownMonitoring();
    }

    public static synchronized FeatureCountdown getInstance(AdminConfig.FeatureConfig featureConfig) {
        if (instance == null) {
            instance = new FeatureCountdown(featureConfig);
        }
        return instance;
    }

    private void startCountdownMonitoring() {
        countdownScheduler.scheduleAtFixedRate(
            this::updateActiveCountdowns,
            0,
            1,
            TimeUnit.SECONDS
        );
        
        System.out.println("FEATURE COUNTDOWN: Started monitoring every second");
    }

    /**
     * بدء عداد تنازلي لميزة غير متزامن
     */
    public void startFeatureCountdownAsync(
        String userId, 
        String featureId, 
        Duration duration,
        Consumer<CountdownEvent> onTick,
        Runnable onExpiry
    ) {
        new Thread(() -> {
            try {
                FeatureTimer timer = new FeatureTimer(
                    featureId,
                    userId,
                    duration,
                    Instant.now(),
                    onTick,
                    onExpiry
                );
                
                activeTimers.put(getTimerKey(userId, featureId), timer);
                System.out.println("FEATURE COUNTDOWN: Started countdown for " + featureId + 
                                 " - Duration: " + duration.getSeconds() + " seconds");
                
            } catch (Exception e) {
                System.err.println("COUNTDOWN START ERROR: " + e.getMessage());
            }
        }).start();
    }

    private void updateActiveCountdowns() {
        try {
            Instant now = Instant.now();
            activeTimers.values().removeIf(timer -> {
                Duration remaining = Duration.between(now, timer.getExpiryTime());
                if (remaining.isNegative() || remaining.isZero()) {
                    // انتهاء العداد
                    timer.triggerExpiry();
                    System.out.println("FEATURE COUNTDOWN: Timer expired for " + timer.getFeatureId());
                    return true;
                } else {
                    // تحديث العداد
                    timer.tick(remaining);
                    return false;
                }
            });
            
        } catch (Exception e) {
            System.err.println("COUNTDOWN UPDATE ERROR: " + e.getMessage());
        }
    }

    /**
     * إيقاف عداد تنازلي لميزة
     */
    public void stopFeatureCountdown(String userId, String featureId) {
        String timerKey = getTimerKey(userId, featureId);
        FeatureTimer timer = activeTimers.remove(timerKey);
        if (timer != null) {
            System.out.println("FEATURE COUNTDOWN: Stopped countdown for " + featureId);
        }
    }

    /**
     * الحصول على الوقت المتبقي لميزة
     */
    public Duration getRemainingTime(String userId, String featureId) {
        String timerKey = getTimerKey(userId, featureId);
        FeatureTimer timer = activeTimers.get(timerKey);
        if (timer != null) {
            return Duration.between(Instant.now(), timer.getExpiryTime());
        }
        return Duration.ZERO;
    }

    private String getTimerKey(String userId, String featureId) {
        return userId + "_" + featureId;
    }

    /**
     * مؤقت الميزة
     */
    private static final class FeatureTimer {
        private final String featureId;
        private final String userId;
        private final Duration duration;
        private final Instant startTime;
        private final Instant expiryTime;
        private final Consumer<CountdownEvent> onTick;
        private final Runnable onExpiry;

        public FeatureTimer(String featureId, String userId, Duration duration, Instant startTime,
                           Consumer<CountdownEvent> onTick, Runnable onExpiry) {
            this.featureId = featureId;
            this.userId = userId;
            this.duration = duration;
            this.startTime = startTime;
            this.expiryTime = startTime.plus(duration);
            this.onTick = onTick;
            this.onExpiry = onExpiry;
        }

        public void tick(Duration remaining) {
            if (onTick != null) {
                CountdownEvent event = new CountdownEvent(
                    featureId,
                    userId,
                    remaining,
                    formatDuration(remaining)
                );
                onTick.accept(event);
            }
        }

        public void triggerExpiry() {
            if (onExpiry != null) {
                onExpiry.run();
            }
            
            // تعطيل الميزة تلقائيًا
            FeatureManager.getInstance(null).disableFeatureForUser(userId, featureId);
        }

        private String formatDuration(Duration duration) {
            long seconds = duration.getSeconds();
            long hours = seconds / 3600;
            long minutes = (seconds % 3600) / 60;
            seconds = seconds % 60;
            
            if (hours > 0) {
                return String.format("%dh %dm %ds", hours, minutes, seconds);
            } else if (minutes > 0) {
                return String.format("%dm %ds", minutes, seconds);
            } else {
                return String.format("%ds", seconds);
            }
        }

        // Getters
        public String getFeatureId() { return featureId; }
        public String getUserId() { return userId; }
        public Duration getDuration() { return duration; }
        public Instant getStartTime() { return startTime; }
        public Instant getExpiryTime() { return expiryTime; }
    }

    /**
     * حدث العداد التنازلي
     */
    public static final class CountdownEvent {
        private final String featureId;
        private final String userId;
        private final Duration remainingTime;
        private final String formattedTime;

        public CountdownEvent(String featureId, String userId, Duration remainingTime, String formattedTime) {
            this.featureId = featureId;
            this.userId = userId;
            this.remainingTime = remainingTime;
            this.formattedTime = formattedTime;
        }

        // Getters
        public String getFeatureId() { return featureId; }
        public String getUserId() { return userId; }
        public Duration getRemainingTime() { return remainingTime; }
        public String getFormattedTime() { return formattedTime; }
    }

    // --- Getters ---
    public int getActiveTimerCount() { return activeTimers.size(); }
    public Map<String, FeatureTimer> getActiveTimers() { return new ConcurrentHashMap<>(activeTimers); }
    
    /**
     * إيقاف المراقبة (للاختبارات)
     */
    public void shutdown() {
        countdownScheduler.shutdown();
        activeTimers.clear();
        System.out.println("FEATURE COUNTDOWN: Shutdown completed");
    }
}