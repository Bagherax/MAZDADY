package mazdady.ad;

import mazdady.arch.UseCaseExecutor;
import mazdady.user.UserManager;
import mazdady.wallet.WalletManager;

import java.util.concurrent.CompletableFuture;
import java.util.function.Consumer;

/**
 * مدير الحملات الإعلانية مع دعم التنفيذ غير المتزامن
 * يتبع نمط Observer لفصل الإنشاء عن التنفيذ
 */
public final class AdManager {
    private final AdCampaignCreator campaignCreator;
    private final AdMarketplace marketplace;
    private final AdDeliveryEngine deliveryEngine;
    private final UseCaseExecutor useCaseExecutor;

    private AdManager() {
        this.campaignCreator = new AdCampaignCreator();
        this.marketplace = new AdMarketplace();
        this.deliveryEngine = new AdDeliveryEngine();
        this.useCaseExecutor = UseCaseExecutor.getInstance();
    }

    private static class Holder {
        static final AdManager INSTANCE = new AdManager();
    }

    public static AdManager getInstance() {
        return Holder.INSTANCE;
    }

    /**
     * إنشاء حملة إعلانية غير متزامنة
     */
    public CompletableFuture<AdCampaign> createCampaignAsync(
        AdCampaign.Platform platform,
        String contentUrl,
        AdCampaign.Goal goal,
        int targetCount,
        double budget
    ) {
        return CompletableFuture.supplyAsync(() -> {
            String userId = UserManager.getInstance(null).getCurrentUser().getUserId();
            return campaignCreator.createCampaign(userId, platform, contentUrl, goal, targetCount, budget);
        }).thenApply(campaign -> {
            marketplace.publishCampaign(campaign);
            deliveryEngine.deliverAd(campaign);
            return campaign;
        });
    }

    /**
     * إنشاء حملة إعلانية مع معالجة النتائج عبر callbacks
     */
    public void createCampaign(
        AdCampaign.Platform platform,
        String contentUrl,
        AdCampaign.Goal goal,
        int targetCount,
        double budget,
        Consumer<AdCampaign> onSuccess,
        Consumer<Exception> onError
    ) {
        useCaseExecutor.execute(
            () -> {
                String userId = UserManager.getInstance(null).getCurrentUser().getUserId();
                return campaignCreator.createCampaign(userId, platform, contentUrl, goal, targetCount, budget);
            },
            campaign -> {
                marketplace.publishCampaign(campaign);
                deliveryEngine.deliverAd(campaign);
                onSuccess.accept(campaign);
            },
            onError
        );
    }

    public AdMarketplace getMarketplace() {
        return marketplace;
    }

    public AdDeliveryEngine getDeliveryEngine() {
        return deliveryEngine;
    }
}