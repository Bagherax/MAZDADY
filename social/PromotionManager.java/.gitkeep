package mazdady.social;

import java.util.*;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ConcurrentHashMap;
import java.util.stream.Collectors;

/**
 * مدير الترويج
 * يدير أنواع الترويج المختلفة (TikTok, YouTube، إلخ)
 */
public final class PromotionManager {
    private final Map<String, Promotion> activePromotions = new ConcurrentHashMap<>();
    private final List<PromotionChannel> channels = new ArrayList<>();

    public PromotionManager() {
        initializeChannels();
    }

    private void initializeChannels() {
        channels.add(new TikTokPromotion());
        channels.add(new YouTubePromotion());
        channels.add(new InstagramPromotion());
        channels.add(new TelegramPromotion());
        channels.add(new XPromotion());
        channels.add(new FacebookPromotion());
        channels.add(new DirectLinkPromotion());
        System.out.println("PROMOTION MANAGER: All promotion channels initialized");
    }

    public CompletableFuture<PromotionResult> launchPromotionAsync(PromotionRequest request) {
        return CompletableFuture.supplyAsync(() -> {
            PromotionChannel channel = channels.stream()
                .filter(c -> c.getType().equals(request.getChannelType()))
                .findFirst()
                .orElse(null);

            if (channel == null) {
                return PromotionResult.failure("Unsupported channel: " + request.getChannelType());
            }

            if (!channel.isAvailable()) {
                return PromotionResult.failure("Channel not available: " + request.getChannelType());
            }

            String promotionId = UUID.randomUUID().toString();
            Promotion promotion = new Promotion(promotionId, request);
            activePromotions.put(promotionId, promotion);

            channel.execute(promotion);
            return PromotionResult.success("Promotion launched: " + promotionId);
        });
    }

    public List<Promotion> getUserPromotions(String userId) {
        return activePromotions.values().stream()
            .filter(p -> p.getAuthorId().equals(userId))
            .collect(Collectors.toList());
    }

    // --- Inner Classes ---
    public static final class PromotionRequest {
        private final String channelType;
        private final String authorId;
        private final String content;
        private final String targetUrl;

        public PromotionRequest(String channelType, String authorId, String content, String targetUrl) {
            this.channelType = channelType;
            this.authorId = authorId;
            this.content = content;
            this.targetUrl = targetUrl;
        }

        public String getChannelType() { return channelType; }
        public String getAuthorId() { return authorId; }
        public String getContent() { return content; }
        public String getTargetUrl() { return targetUrl; }
    }

    public static final class PromotionResult {
        private final boolean success;
        private final String message;

        private PromotionResult(boolean success, String message) {
            this.success = success;
            this.message = message;
        }

        public static PromotionResult success(String message) {
            return new PromotionResult(true, message);
        }

        public static PromotionResult failure(String message) {
            return new PromotionResult(false, message);
        }

        public boolean isSuccess() { return success; }
        public String getMessage() { return message; }
    }

    public static final class Promotion {
        private final String id;
        private final PromotionRequest request;
        private final long timestamp;

        public Promotion(String id, PromotionRequest request) {
            this.id = id;
            this.request = request;
            this.timestamp = System.currentTimeMillis();
        }

        public String getId() { return id; }
        public String getAuthorId() { return request.getAuthorId(); }
        public long getTimestamp() { return timestamp; }
    }

    public interface PromotionChannel {
        String getType();
        boolean isAvailable();
        void execute(Promotion promotion);
    }
}