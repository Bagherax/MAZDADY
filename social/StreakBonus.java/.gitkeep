package mazdady.social;

import java.time.LocalDate;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ConcurrentHashMap;

/**
 * مكافآت السلسلة
 * تعطي مكافآت إضافية عند الحفاظ على سلسلة من الأنشطة
 */
public final class StreakBonus {
    private final Map<String, StreakInfo> userStreaks = new ConcurrentHashMap<>();
    private static final int[] BONUS_PER_STREAK = {0, 5, 10, 20, 50, 100, 200};

    public CompletableFuture<StreakResult> updateStreakAsync(String userId) {
        return CompletableFuture.supplyAsync(() -> {
            StreakInfo streak = userStreaks.computeIfAbsent(userId, k -> new StreakInfo());
            LocalDate today = LocalDate.now();

            if (streak.getLastActivityDate().equals(today)) {
                return StreakResult.noChange("Already updated today");
            }

            if (streak.getLastActivityDate().plusDays(1).equals(today)) {
                streak.incrementStreak();
            } else {
                streak.resetStreak();
            }

            streak.setLastActivityDate(today);
            int bonus = BONUS_PER_STREAK[Math.min(streak.getCurrentStreak(), BONUS_PER_STREAK.length - 1)];

            return StreakResult.success("Streak updated: " + streak.getCurrentStreak(), bonus);
        });
    }

    public int getCurrentStreak(String userId) {
        return userStreaks.getOrDefault(userId, new StreakInfo()).getCurrentStreak();
    }

    // --- Inner Classes ---
    public static final class StreakResult {
        private final boolean success;
        private final String message;
        private final int bonusPoints;

        private StreakResult(boolean success, String message, int bonusPoints) {
            this.success = success;
            this.message = message;
            this.bonusPoints = bonusPoints;
        }

        public static StreakResult success(String message, int bonusPoints) {
            return new StreakResult(true, message, bonusPoints);
        }

        public static StreakResult noChange(String message) {
            return new StreakResult(false, message, 0);
        }

        public boolean isSuccess() { return success; }
        public String getMessage() { return message; }
        public int getBonusPoints() { return bonusPoints; }
    }

    public static final class StreakInfo {
        private LocalDate lastActivityDate = LocalDate.MIN;
        private int currentStreak = 0;

        public void incrementStreak() { currentStreak++; }
        public void resetStreak() { currentStreak = 1; }
        public void setLastActivityDate(LocalDate date) { this.lastActivityDate = date; }

        public LocalDate getLastActivityDate() { return lastActivityDate; }
        public int getCurrentStreak() { return currentStreak; }
    }
}