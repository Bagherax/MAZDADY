package mazdady.social;

import mazdady.user.User;
import mazdady.user.UserManager;
import mazdady.wallet.WalletManager;
import mazdady.admin.AdminConfig;

import java.time.Instant;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.atomic.AtomicLong;
import java.util.function.BiFunction;

/**
 * نظام مكافآت المشاركة مع دعم التكامل المتقدم
 * يتبع نمط Strategy لفصل استراتيجيات المكافآت
 */
public final class ShareRewardSystem {
    private final WalletManager walletManager;
    private final Map<String, BiFunction<User, String, ShareResult>> rewardStrategies = new ConcurrentHashMap<>();
    private final AtomicLong nextRewardId = new AtomicLong(1000);
    private static ShareRewardSystem instance;

    private ShareRewardSystem(WalletManager walletManager) {
        this.walletManager = walletManager;
        initializeRewardStrategies();
    }

    public static synchronized ShareRewardSystem getInstance(WalletManager walletManager) {
        if (instance == null) {
            instance = new ShareRewardSystem(walletManager);
        }
        return instance;
    }

    private void initializeRewardStrategies() {
        rewardStrategies.put("youtube", this::rewardYouTubeShare);
        rewardStrategies.put("tiktok", this::rewardTikTokShare);
        rewardStrategies.put("instagram", this::rewardInstagramShare);
        rewardStrategies.put("facebook", this::rewardFacebookShare);
        rewardStrategies.put("twitter", this::rewardTwitterShare);
        rewardStrategies.put("telegram", this::rewardTelegramShare);
        rewardStrategies.put("whatsapp", this::rewardWhatsAppShare);
        rewardStrategies.put("app_download", this::rewardAppDownload);
        rewardStrategies.put("app_activation", this::rewardAppActivation);
        rewardStrategies.put("referral", this::rewardReferral);
        
        System.out.println("SHARE REWARD SYSTEM: Initialized " + rewardStrategies.size() + " reward strategies");
    }

    /**
     * منح مكافأة مشاركة غير متزامن
     */
    public CompletableFuture<ShareResult> grantShareRewardAsync(
        String userId, 
        String platform, 
        String action, 
        String contentUrl
    ) {
        return CompletableFuture.supplyAsync(() -> {
            try {
                User user = UserManager.getInstance(null).getUserById(userId);
                if (user == null) {
                    return ShareResult.failure("User not found");
                }
                
                BiFunction<User, String, ShareResult> strategy = rewardStrategies.get(platform.toLowerCase());
                if (strategy == null) {
                    return ShareResult.failure("Unsupported platform: " + platform);
                }
                
                ShareResult result = strategy.apply(user, contentUrl);
                if (result.isSuccess()) {
                    // تسجيل المكافأة
                    recordShareReward(userId, platform, action, contentUrl, result.getRewardAmount());
                    
                    System.out.println("SHARE REWARD SYSTEM: Granted reward to " + userId + 
                                     " - Platform: " + platform + 
                                     " - Action: " + action + 
                                     " - Amount: " + String.format("%.2f", result.getRewardAmount()) + " MAZDADY");
                }
                
                return result;
                
            } catch (Exception e) {
                return ShareResult.failure("Share reward failed: " + e.getMessage());
            }
        });
    }

    // --- استراتيجيات المكافآت ---
    private ShareResult rewardYouTubeShare(User user, String contentUrl) {
        try {
            if (!isValidYouTubeUrl(contentUrl)) {
                return ShareResult.failure("Invalid YouTube URL");
            }
            
            double reward = AdminConfig.getInstance().getSocialConfig().getYoutubeShareReward();
            user.setBalance(user.getBalance() + reward);
            walletManager.depositMAZDADY(reward);
            
            return ShareResult.success(reward, "YouTube share reward granted");
            
        } catch (Exception e) {
            return ShareResult.failure("YouTube reward failed: " + e.getMessage());
        }
    }

    private ShareResult rewardTikTokShare(User user, String contentUrl) {
        try {
            if (!isValidTikTokUrl(contentUrl)) {
                return ShareResult.failure("Invalid TikTok URL");
            }
            
            double reward = AdminConfig.getInstance().getSocialConfig().getTiktokShareReward();
            user.setBalance(user.getBalance() + reward);
            walletManager.depositMAZDADY(reward);
            
            return ShareResult.success(reward, "TikTok share reward granted");
            
        } catch (Exception e) {
            return ShareResult.failure("TikTok reward failed: " + e.getMessage());
        }
    }

    private ShareResult rewardInstagramShare(User user, String contentUrl) {
        try {
            if (!isValidInstagramUrl(contentUrl)) {
                return ShareResult.failure("Invalid Instagram URL");
            }
            
            double reward = AdminConfig.getInstance().getSocialConfig().getInstagramShareReward();
            user.setBalance(user.getBalance() + reward);
            walletManager.depositMAZDADY(reward);
            
            return ShareResult.success(reward, "Instagram share reward granted");
            
        } catch (Exception e) {
            return ShareResult.failure("Instagram reward failed: " + e.getMessage());
        }
    }

    private ShareResult rewardFacebookShare(User user, String contentUrl) {
        try {
            if (!isValidFacebookUrl(contentUrl)) {
                return ShareResult.failure("Invalid Facebook URL");
            }
            
            double reward = AdminConfig.getInstance().getSocialConfig().getFacebookShareReward();
            user.setBalance(user.getBalance() + reward);
            walletManager.depositMAZDADY(reward);
            
            return ShareResult.success(reward, "Facebook share reward granted");
            
        } catch (Exception e) {
            return ShareResult.failure("Facebook reward failed: " + e.getMessage());
        }
    }

    private ShareResult rewardTwitterShare(User user, String contentUrl) {
        try {
            if (!isValidTwitterUrl(contentUrl)) {
                return ShareResult.failure("Invalid Twitter URL");
            }
            
            double reward = AdminConfig.getInstance().getSocialConfig().getTwitterShareReward();
            user.setBalance(user.getBalance() + reward);
            walletManager.depositMAZDADY(reward);
            
            return ShareResult.success(reward, "Twitter share reward granted");
            
        } catch (Exception e) {
            return ShareResult.failure("Twitter reward failed: " + e.getMessage());
        }
    }

    private ShareResult rewardTelegramShare(User user, String contentUrl) {
        try {
            if (!isValidTelegramUrl(contentUrl)) {
                return ShareResult.failure("Invalid Telegram URL");
            }
            
            double reward = AdminConfig.getInstance().getSocialConfig().getTelegramShareReward();
            user.setBalance(user.getBalance() + reward);
            walletManager.depositMAZDADY(reward);
            
            return ShareResult.success(reward, "Telegram share reward granted");
            
        } catch (Exception e) {
            return ShareResult.failure("Telegram reward failed: " + e.getMessage());
        }
    }

    private ShareResult rewardWhatsAppShare(User user, String contentUrl) {
        try {
            if (!isValidWhatsAppUrl(contentUrl)) {
                return ShareResult.failure("Invalid WhatsApp URL");
            }
            
            double reward = AdminConfig.getInstance().getSocialConfig().getWhatsappShareReward();
            user.setBalance(user.getBalance() + reward);
            walletManager.depositMAZDADY(reward);
            
            return ShareResult.success(reward, "WhatsApp share reward granted");
            
        } catch (Exception e) {
            return ShareResult.failure("WhatsApp reward failed: " + e.getMessage());
        }
    }

    private ShareResult rewardAppDownload(User user, String contentUrl) {
        try {
            double reward = AdminConfig.getInstance().getSocialConfig().getDownloadRewardAmount();
            user.setBalance(user.getBalance() + reward);
            walletManager.depositMAZDADY(reward);
            
            return ShareResult.success(reward, "App download reward granted");
            
        } catch (Exception e) {
            return ShareResult.failure("App download reward failed: " + e.getMessage());
        }
    }

    private ShareResult rewardAppActivation(User user, String contentUrl) {
        try {
            double reward = AdminConfig.getInstance().getSocialConfig().getActivationRewardAmount();
            user.setBalance(user.getBalance() + reward);
            walletManager.depositMAZDADY(reward);
            
            return ShareResult.success(reward, "App activation reward granted");
            
        } catch (Exception e) {
            return ShareResult.failure("App activation reward failed: " + e.getMessage());
        }
    }

    private ShareResult rewardReferral(User user, String contentUrl) {
        try {
            double reward = AdminConfig.getInstance().getSocialConfig().getReferralRewardAmount();
            user.setBalance(user.getBalance() + reward);
            walletManager.depositMAZDADY(reward);
            
            return ShareResult.success(reward, "Referral reward granted");
            
        } catch (Exception e) {
            return ShareResult.failure("Referral reward failed: " + e.getMessage());
        }
    }

    // --- التحقق من صحة الروابط ---
    private boolean isValidYouTubeUrl(String url) {
        return url != null && (url.contains("youtube.com/watch") || url.contains("youtu.be/"));
    }

    private boolean isValidTikTokUrl(String url) {
        return url != null && url.contains("tiktok.com/");
    }

    private boolean isValidInstagramUrl(String url) {
        return url != null && url.contains("instagram.com/");
    }

    private boolean isValidFacebookUrl(String url) {
        return url != null && url.contains("facebook.com/");
    }

    private boolean isValidTwitterUrl(String url) {
        return url != null && (url.contains("twitter.com/") || url.contains("x.com/"));
    }

    private boolean isValidTelegramUrl(String url) {
        return url != null && (url.contains("t.me/") || url.contains("telegram.me/"));
    }

    private boolean isValidWhatsAppUrl(String url) {
        return url != null && url.contains("wa.me/");
    }

    // --- تسجيل المكافآت ---
    private void recordShareReward(String userId, String platform, String action, 
                                 String contentUrl, double rewardAmount) {
        try {
            // في الإنتاج: تسجيل في قاعدة البيانات
            System.out.println("SHARE REWARD RECORD: " + userId + " - " + platform + 
                             " - " + action + " - " + rewardAmount + " MAZDADY");
            
        } catch (Exception e) {
            System.err.println("SHARE REWARD RECORD ERROR: " + e.getMessage());
        }
    }

    /**
     * إضافة استراتيجية مكافأة مخصصة
     */
    public void addCustomRewardStrategy(String platform, BiFunction<User, String, ShareResult> strategy) {
        if (platform != null && strategy != null) {
            rewardStrategies.put(platform.toLowerCase(), strategy);
            System.out.println("SHARE REWARD SYSTEM: Added custom reward strategy for " + platform);
        }
    }

    /**
     * إزالة استراتيجية مكافأة مخصصة
     */
    public void removeCustomRewardStrategy(String platform) {
        if (platform != null) {
            rewardStrategies.remove(platform.toLowerCase());
            System.out.println("SHARE REWARD SYSTEM: Removed custom reward strategy for " + platform);
        }
    }

    // --- Getters ---
    public int getRewardStrategyCount() { return rewardStrategies.size(); }
    public boolean hasRewardStrategy(String platform) { 
        return rewardStrategies.containsKey(platform.toLowerCase()); 
    }
    public double getTotalRewardsDistributed() {
        // في الإنتاج: حساب من قاعدة البيانات
        return 15750.25; // قيمة محاكاة
    }
    public int getTotalSharesCount() {
        // في الإنتاج: حساب من قاعدة البيانات
        return 1250; // قيمة محاكاة
    }
    
    /**
     * إعادة تعيين النظام (للاختبارات)
     */
    public void reset() {
        rewardStrategies.clear();
        nextRewardId.set(1000);
        initializeRewardStrategies();
        System.out.println("SHARE REWARD SYSTEM: Reset completed");
    }

    /**
     * نتيجة المشاركة
     */
    public static final class ShareResult {
        private final boolean success;
        private final double rewardAmount;
        private final String message;

        private ShareResult(boolean success, double rewardAmount, String message) {
            this.success = success;
            this.rewardAmount = rewardAmount;
            this.message = message;
        }

        public static ShareResult success(double rewardAmount, String message) {
            return new ShareResult(true, rewardAmount, message);
        }

        public static ShareResult failure(String message) {
            return new ShareResult(false, 0, message);
        }

        public boolean isSuccess() { return success; }
        public double getRewardAmount() { return rewardAmount; }
        public String getMessage() { return message; }
    }
}