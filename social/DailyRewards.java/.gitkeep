package mazdady.social;

import java.time.LocalDate;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ConcurrentHashMap;

/**
 * نظام المكافآت اليومية
 * يدعم تتبع الدخول اليومي وتقديم المكافآت
 */
public final class DailyRewards {
    private final Map<String, UserDailyReward> userRewards = new ConcurrentHashMap<>();
    private static final int[] REWARDS_PER_DAY = {10, 20, 30, 50, 100, 200, 500};

    public CompletableFuture<DailyRewardResult> claimDailyRewardAsync(String userId) {
        return CompletableFuture.supplyAsync(() -> {
            UserDailyReward userReward = userRewards.computeIfAbsent(userId, k -> new UserDailyReward());
            LocalDate today = LocalDate.now();

            if (userReward.getLastClaimDate().equals(today)) {
                return DailyRewardResult.failure("Reward already claimed today");
            }

            if (userReward.getLastClaimDate().plusDays(1).equals(today)) {
                userReward.incrementStreak();
            } else {
                userReward.resetStreak();
            }

            int reward = REWARDS_PER_DAY[Math.min(userReward.getStreak() - 1, REWARDS_PER_DAY.length - 1)];
            userReward.setLastClaimDate(today);
            userReward.addTotalRewards(reward);

            return DailyRewardResult.success("Daily reward claimed: " + reward + " points", reward);
        });
    }

    public int getCurrentStreak(String userId) {
        return userRewards.getOrDefault(userId, new UserDailyReward()).getStreak();
    }

    // --- Inner Classes ---
    public static final class DailyRewardResult {
        private final boolean success;
        private final String message;
        private final int rewardPoints;

        private DailyRewardResult(boolean success, String message, int rewardPoints) {
            this.success = success;
            this.message = message;
            this.rewardPoints = rewardPoints;
        }

        public static DailyRewardResult success(String message, int rewardPoints) {
            return new DailyRewardResult(true, message, rewardPoints);
        }

        public static DailyRewardResult failure(String message) {
            return new DailyRewardResult(false, message, 0);
        }

        public boolean isSuccess() { return success; }
        public String getMessage() { return message; }
        public int getRewardPoints() { return rewardPoints; }
    }

    public static final class UserDailyReward {
        private LocalDate lastClaimDate = LocalDate.MIN;
        private int streak = 0;
        private int totalRewards = 0;

        public void incrementStreak() { streak++; }
        public void resetStreak() { streak = 1; }
        public void setLastClaimDate(LocalDate date) { this.lastClaimDate = date; }
        public void addTotalRewards(int points) { this.totalRewards += points; }

        public LocalDate getLastClaimDate() { return lastClaimDate; }
        public int getStreak() { return streak; }
        public int getTotalRewards() { return totalRewards; }
    }
}