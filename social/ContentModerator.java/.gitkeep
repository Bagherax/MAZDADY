package mazdady.social;

import java.util.*;
import java.util.concurrent.CompletableFuture;
import java.util.regex.Pattern;

/**
 * مراقب المحتوى
 * يدعم التصفية التلقائية واليدوية
 */
public final class ContentModerator {
    private final Set<String> bannedWords = new HashSet<>();
    private final Set<String> allowedUrls = new HashSet<>();
    private final List<ContentFilter> filters = new ArrayList<>();

    public ContentModerator() {
        initializeDefaultFilters();
    }

    private void initializeDefaultFilters() {
        bannedWords.addAll(Arrays.asList("spam", "scam", "fraud", "phishing"));
        allowedUrls.add("mazdady.com");
        filters.add(new ProfanityFilter(bannedWords));
        filters.add(new UrlFilter(allowedUrls));
        System.out.println("CONTENT MODERATOR: Default filters initialized");
    }

    public CompletableFuture<ModerationResult> moderateContentAsync(String content, String authorId) {
        return CompletableFuture.supplyAsync(() -> {
            for (ContentFilter filter : filters) {
                if (!filter.isValid(content)) {
                    return ModerationResult.flagged("Content flagged by " + filter.getName() + ": " + content);
                }
            }
            return ModerationResult.approved("Content approved: " + content);
        });
    }

    public void addBannedWord(String word) {
        bannedWords.add(word.toLowerCase());
    }

    public void removeBannedWord(String word) {
        bannedWords.remove(word.toLowerCase());
    }

    // --- Inner Classes ---
    public static final class ModerationResult {
        private final boolean approved;
        private final String message;

        private ModerationResult(boolean approved, String message) {
            this.approved = approved;
            this.message = message;
        }

        public static ModerationResult approved(String message) {
            return new ModerationResult(true, message);
        }

        public static ModerationResult flagged(String message) {
            return new ModerationResult(false, message);
        }

        public boolean isApproved() { return approved; }
        public String getMessage() { return message; }
    }

    public interface ContentFilter {
        boolean isValid(String content);
        String getName();
    }

    public static final class ProfanityFilter implements ContentFilter {
        private final Set<String> bannedWords;

        public ProfanityFilter(Set<String> bannedWords) {
            this.bannedWords = bannedWords;
        }

        @Override
        public boolean isValid(String content) {
            String lowerContent = content.toLowerCase();
            for (String word : bannedWords) {
                if (lowerContent.contains(word)) {
                    return false;
                }
            }
            return true;
        }

        @Override
        public String getName() {
            return "Profanity Filter";
        }
    }

    public static final class UrlFilter implements ContentFilter {
        private final Set<String> allowedUrls;

        public UrlFilter(Set<String> allowedUrls) {
            this.allowedUrls = allowedUrls;
        }

        @Override
        public boolean isValid(String content) {
            // في الإنتاج: تحقق من الروابط باستخدام Regex أو مكتبة URL
            return true; // مثال بسيط
        }

        @Override
        public String getName() {
            return "URL Filter";
        }
    }
}