package mazdady.social;

import java.util.*;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ConcurrentHashMap;
import java.util.function.Consumer;

/**
 * نظام الإنجازات
 * يتبع نمط Observer ل	trigger الأحداث
 * ونمط Factory لإنشاء الإنجازات
 */
public final class Achievements {
    private final Map<String, Achievement> achievements = new ConcurrentHashMap<>();
    private final List<AchievementObserver> observers = new ArrayList<>();
    private final Set<String> unlockedAchievements = ConcurrentHashMap.newKeySet();

    public Achievements() {
        initializeDefaultAchievements();
    }

    private void initializeDefaultAchievements() {
        registerAchievement(new Achievement("first_login", "تسجيل أول دخول", "الوصول إلى أول تسجيل دخول", 10));
        registerAchievement(new Achievement("daily_login", "مستمر!", "تسجيل الدخول 7 أيام متتالية", 50));
        registerAchievement(new Achievement("first_trade", "متداول مبتدئ", "إتمام أول تداول", 30));
        registerAchievement(new Achievement("referral_5", "مُروج!", "دعوة 5 أشخاص", 100));
        registerAchievement(new Achievement("level_up_10", "مُحترف!", "الوصول إلى المستوى 10", 200));
        System.out.println("ACHIEVEMENTS: Default achievements initialized");
    }

    public void registerAchievement(Achievement achievement) {
        achievements.put(achievement.getId(), achievement);
    }

    public CompletableFuture<AchievementResult> unlockAchievementAsync(String userId, String achievementId) {
        return CompletableFuture.supplyAsync(() -> {
            Achievement achievement = achievements.get(achievementId);
            if (achievement == null) {
                return AchievementResult.failure("Invalid achievement: " + achievementId);
            }

            if (unlockedAchievements.contains(achievementId)) {
                return AchievementResult.failure("Achievement already unlocked: " + achievementId);
            }

            unlockedAchievements.add(achievementId);
            notifyObservers(userId, achievement);
            return AchievementResult.success("Achievement unlocked: " + achievementId, achievement.getRewardPoints());
        });
    }

    public boolean isAchievementUnlocked(String achievementId) {
        return unlockedAchievements.contains(achievementId);
    }

    public Set<String> getUserUnlockedAchievements(String userId) {
        // في الإنتاج: جلب من قاعدة البيانات
        return new HashSet<>(unlockedAchievements);
    }

    public void addObserver(AchievementObserver observer) {
        observers.add(observer);
    }

    private void notifyObservers(String userId, Achievement achievement) {
        observers.forEach(observer -> observer.onAchievementUnlocked(userId, achievement));
    }

    // --- Inner Classes ---
    public static final class Achievement {
        private final String id;
        private final String title;
        private final String description;
        private final int rewardPoints;

        public Achievement(String id, String title, String description, int rewardPoints) {
            this.id = id;
            this.title = title;
            this.description = description;
            this.rewardPoints = rewardPoints;
        }

        public String getId() { return id; }
        public String getTitle() { return title; }
        public String getDescription() { return description; }
        public int getRewardPoints() { return rewardPoints; }
    }

    public static final class AchievementResult {
        private final boolean success;
        private final String message;
        private final int rewardPoints;

        private AchievementResult(boolean success, String message, int rewardPoints) {
            this.success = success;
            this.message = message;
            this.rewardPoints = rewardPoints;
        }

        public static AchievementResult success(String message, int rewardPoints) {
            return new AchievementResult(true, message, rewardPoints);
        }

        public static AchievementResult failure(String message) {
            return new AchievementResult(false, message, 0);
        }

        public boolean isSuccess() { return success; }
        public String getMessage() { return message; }
        public int getRewardPoints() { return rewardPoints; }
    }

    @FunctionalInterface
    public interface AchievementObserver {
        void onAchievementUnlocked(String userId, Achievement achievement);
    }
}