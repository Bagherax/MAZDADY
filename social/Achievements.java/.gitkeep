package mazdady.social;

import mazdady.user.User;
import mazdady.user.UserManager;
import mazdady.admin.AdminConfig;

import java.time.Instant;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.function.BiFunction;

/**
 * نظام الإنجازات مع دعم الشارات الديناميكية
 * يتبع نمط Strategy لفصل استراتيجيات الإنجازات
 */
public final class Achievements {
    private final Map<String, Achievement> achievements = new ConcurrentHashMap<>();
    private static Achievements instance;

    private Achievements() {
        initializeAchievements();
    }

    public static synchronized Achievements getInstance() {
        if (instance == null) {
            instance = new Achievements();
        }
        return instance;
    }

    private void initializeAchievements() {
        // إنجازات المستويات
        achievements.put("level_1", new Achievement(
            "level_1",
            "أول مستوى",
            "حقق المستوى الأول",
            10,
            (user, progress) -> user.getLevel() >= 1
        ));
        
        achievements.put("level_5", new Achievement(
            "level_5",
            "خبير مبتدئ",
            "حقق المستوى الخامس",
            50,
            (user, progress) -> user.getLevel() >= 5
        ));
        
        achievements.put("level_10", new Achievement(
            "level_10",
            "ماجستير التداول",
            "حقق المستوى العاشر",
            100,
            (user, progress) -> user.getLevel() >= 10
        ));
        
        achievements.put("level_20", new Achievement(
            "level_20",
            "أستاذ التداول",
            "حقق المستوى العشرين",
            200,
            (user, progress) -> user.getLevel() >= 20
        ));
        
        System.out.println("ACHIEVEMENTS: Initialized " + achievements.size() + " achievements");
    }

    /**
     * التحقق من إنجاز المستخدم غير متزامن
     */
    public void checkAchievementAsync(String userId, String achievementId) {
        new Thread(() -> {
            try {
                User user = UserManager.getInstance(null).getUserById(userId);
                if (user == null) {
                    System.err.println("ACHIEVEMENTS: User not found - " + userId);
                    return;
                }
                
                Achievement achievement = achievements.get(achievementId);
                if (achievement == null) {
                    System.err.println("ACHIEVEMENTS: Achievement not found - " + achievementId);
                    return;
                }
                
                int progress = calculateAchievementProgress(user, achievementId);
                boolean unlocked = achievement.condition.test(user, progress);
                
                if (unlocked && !user.hasAchievement(achievementId)) {
                    unlockAchievement(user, achievement);
                }
                
            } catch (Exception e) {
                System.err.println("ACHIEVEMENT CHECK ERROR: " + e.getMessage());
            }
        }).start();
    }

    private int calculateAchievementProgress(User user, String achievementId) {
        switch (achievementId) {
            case "level_1":
            case "level_5":
            case "level_10":
            case "level_20":
                return user.getLevel();
            default:
                return 0;
        }
    }

    private void unlockAchievement(User user, Achievement achievement) {
        try {
            // منح الإنجاز
            user.addAchievement(achievement.id);
            
            // منح النقاط المجتمعية
            user.addCommunityPoints(achievement.rewardPoints);
            
            // منح الشارة تلقائيًا
            grantAchievementBadge(user, achievement);
            
            // إشعار النظام
            notifyAchievementUnlocked(user.getUserId(), achievement);
            
            System.out.println("ACHIEVEMENTS: Unlocked " + achievement.name + " for user " + user.getUserId());
            
        } catch (Exception e) {
            System.err.println("ACHIEVEMENT UNLOCK ERROR: " + e.getMessage());
        }
    }

    private void grantAchievementBadge(User user, Achievement achievement) {
        try {
            // في الإنتاج: منح الشارة حسب نوع الإنجاز
            String badgeEmoji = getBadgeEmojiForAchievement(achievement.id);
            user.addBadge(badgeEmoji, achievement.name);
            
            System.out.println("ACHIEVEMENTS: Granted badge " + badgeEmoji + " for " + achievement.name);
            
        } catch (Exception e) {
            System.err.println("BADGE GRANT ERROR: " + e.getMessage());
        }
    }

    private String getBadgeEmojiForAchievement(String achievementId) {
        switch (achievementId) {
            case "level_1": return "🥉";
            case "level_5": return "🥈";
            case "level_10": return "🥇";
            case "level_20": return "🏆";
            default: return "⭐";
        }
    }

    private void notifyAchievementUnlocked(String userId, Achievement achievement) {
        try {
            // في الإنتاج: إرسال إشعار للمستخدم
            System.out.println("ACHIEVEMENT NOTIFICATION: " + userId + " unlocked " + achievement.name);
            
            // في الإنتاج: إرسال إشعار للنظام الإداري
            mazdady.admin.AdminDashboard.getInstance().notifyAchievementUnlocked(userId, achievement);
            
        } catch (Exception e) {
            System.err.println("ACHIEVEMENT NOTIFICATION ERROR: " + e.getMessage());
        }
    }

    /**
     * تحديث إنجازات المستخدم ديناميكيًا
     */
    public void updateAchievementsFromConfig(AdminConfig.AchievementConfig config) {
        if (config == null) return;
        
        try {
            Map<String, AdminConfig.AchievementConfig.AchievementDefinition> definitions = 
                config.getAchievementDefinitions();
            
            achievements.clear();
            definitions.forEach((id, definition) -> {
                achievements.put(id, new Achievement(
                    id,
                    definition.getName(),
                    definition.getDescription(),
                    definition.getRewardPoints(),
                    (user, progress) -> user.getLevel() >= definition.getRequiredLevel()
                ));
            });
            
            System.out.println("ACHIEVEMENTS: Updated from admin config - " + achievements.size() + " achievements");
            
        } catch (Exception e) {
            System.err.println("ACHIEVEMENTS UPDATE ERROR: " + e.getMessage());
        }
    }

    /**
     * إضافة إنجاز مخصص
     */
    public void addCustomAchievement(String id, String name, String description, 
                                   int rewardPoints, BiFunction<User, Integer, Boolean> condition) {
        if (id != null && name != null && condition != null) {
            Achievement achievement = new Achievement(id, name, description, rewardPoints, condition);
            achievements.put(id, achievement);
            System.out.println("ACHIEVEMENTS: Added custom achievement - " + name);
        }
    }

    /**
     * إزالة إنجاز مخصص
     */
    public void removeCustomAchievement(String id) {
        if (id != null) {
            Achievement removed = achievements.remove(id);
            if (removed != null) {
                System.out.println("ACHIEVEMENTS: Removed custom achievement - " + removed.name);
            }
        }
    }

    // --- الإنجاز ---
    private static final class Achievement {
        private final String id;
        private final String name;
        private final String description;
        private final int rewardPoints;
        private final BiFunction<User, Integer, Boolean> condition;

        public Achievement(String id, String name, String description, 
                          int rewardPoints, BiFunction<User, Integer, Boolean> condition) {
            this.id = id;
            this.name = name;
            this.description = description;
            this.rewardPoints = rewardPoints;
            this.condition = condition;
        }
    }

    // --- Getters ---
    public int getAchievementCount() { return achievements.size(); }
    public boolean hasAchievement(String id) { return achievements.containsKey(id); }
    public Map<String, Achievement> getAchievements() { return new ConcurrentHashMap<>(achievements); }
    
    /**
     * إعادة تعيين الإنجازات (للاختبارات)
     */
    public void reset() {
        achievements.clear();
        initializeAchievements();
        System.out.println("ACHIEVEMENTS: Reset completed");
    }
}