package mazdady.support;

import java.util.Map;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ConcurrentHashMap;

/**
 * جامع التعليقات داخل التطبيق
 * يعرض نموذج تعليق تلقائي في أوقات محددة أو عند أحداث معينة
 */
public final class InAppFeedbackCollector {
    private final Map<String, FeedbackSession> activeSessions = new ConcurrentHashMap<>();
    private final Feedback feedbackEngine;

    public InAppFeedbackCollector(Feedback feedbackEngine) {
        this.feedbackEngine = feedbackEngine;
    }

    public CompletableFuture<Feedback.FeedbackResult> triggerFeedbackAsync(String userId, String triggerEvent, Map<String, String> context) {
        return CompletableFuture.supplyAsync(() -> {
            String sessionId = java.util.UUID.randomUUID().toString();
            FeedbackSession session = new FeedbackSession(sessionId, userId, triggerEvent, context);
            activeSessions.put(sessionId, session);

            // في الإنتاج: عرض نموذج تعليق في الواجهة
            System.out.println("IN-APP FEEDBACK: Triggered for user " + userId + " on event: " + triggerEvent);
            return Feedback.FeedbackResult.success("Feedback session started. ID: " + sessionId);
        });
    }

    public CompletableFuture<Feedback.FeedbackResult> submitSessionFeedbackAsync(String sessionId, int rating, String comment) {
        return CompletableFuture.supplyAsync(() -> {
            FeedbackSession session = activeSessions.get(sessionId);
            if (session == null) {
                return Feedback.FeedbackResult.failure("Invalid session ID: " + sessionId);
            }

            Feedback.FeedbackRequest request = new Feedback.FeedbackRequest(
                session.getUserId(),
                rating,
                comment,
                Feedback.FeedbackCategory.SUGGESTION,
                session.getContext()
            );

            return feedbackEngine.submitFeedbackAsync(request).join();
        });
    }

    // --- Inner Classes ---
    public static final class FeedbackSession {
        private final String id;
        private final String userId;
        private final String triggerEvent;
        private final Map<String, String> context;
        private final long timestamp;

        public FeedbackSession(String id, String userId, String triggerEvent, Map<String, String> context) {
            this.id = id;
            this.userId = userId;
            this.triggerEvent = triggerEvent;
            this.context = context;
            this.timestamp = System.currentTimeMillis();
        }

        public String getId() { return id; }
        public String getUserId() { return userId; }
        public String getTriggerEvent() { return triggerEvent; }
        public Map<String, String> getContext() { return context; }
        public long getTimestamp() { return timestamp; }
    }
}